/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ANYARGS) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT", swig_ruby_trackings_count, NULL);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    if (TYPE(object) != T_DATA)
      abort();
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(void* ptr, VALUE obj, void(*meth)(void* ptr, VALUE obj)) {
  (*meth)(ptr, obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings, (int (*)(ANYARGS))&swig_ruby_internal_iterate_callback, (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (obj) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_anl__BasicModule swig_types[1]
#define SWIGTYPE_p_anlgeant4__BasicPrimaryGen swig_types[2]
#define SWIGTYPE_p_anlgeant4__GaussianBeamPrimaryGen swig_types[3]
#define SWIGTYPE_p_anlgeant4__Geant4Body swig_types[4]
#define SWIGTYPE_p_anlgeant4__Geant4Simple swig_types[5]
#define SWIGTYPE_p_anlgeant4__IsotropicPrimaryGen swig_types[6]
#define SWIGTYPE_p_anlgeant4__NucleusPrimaryGen swig_types[7]
#define SWIGTYPE_p_anlgeant4__NucleusPrimaryGenInVolume swig_types[8]
#define SWIGTYPE_p_anlgeant4__PlaneWavePrimaryGen swig_types[9]
#define SWIGTYPE_p_anlgeant4__PlaneWaveRectanglePrimaryGen swig_types[10]
#define SWIGTYPE_p_anlgeant4__PointSourcePrimaryGen swig_types[11]
#define SWIGTYPE_p_anlgeant4__PrimaryGenUniformSourceInVolume swig_types[12]
#define SWIGTYPE_p_anlgeant4__StandardPickUpData swig_types[13]
#define SWIGTYPE_p_anlgeant4__VANLGeometry swig_types[14]
#define SWIGTYPE_p_anlgeant4__VANLPhysicsList swig_types[15]
#define SWIGTYPE_p_anlgeant4__VANLPrimaryGen swig_types[16]
#define SWIGTYPE_p_anlgeant4__VPickUpData swig_types[17]
#define SWIGTYPE_p_char swig_types[18]
#define SWIGTYPE_p_comptonsoft__AHRadiationBackgroundPrimaryGen swig_types[19]
#define SWIGTYPE_p_comptonsoft__ActivationPickUpData swig_types[20]
#define SWIGTYPE_p_comptonsoft__AnalyzeHits swig_types[21]
#define SWIGTYPE_p_comptonsoft__ApplyEPICompensation swig_types[22]
#define SWIGTYPE_p_comptonsoft__AssignG4CopyNumber swig_types[23]
#define SWIGTYPE_p_comptonsoft__BackProjection swig_types[24]
#define SWIGTYPE_p_comptonsoft__BackProjectionSky swig_types[25]
#define SWIGTYPE_p_comptonsoft__CSHitCollection swig_types[26]
#define SWIGTYPE_p_comptonsoft__CalculatePedestalLevels swig_types[27]
#define SWIGTYPE_p_comptonsoft__ComptonEventFilter swig_types[28]
#define SWIGTYPE_p_comptonsoft__ComptonModeFilter swig_types[29]
#define SWIGTYPE_p_comptonsoft__ConstructChannelMap swig_types[30]
#define SWIGTYPE_p_comptonsoft__ConstructDetector swig_types[31]
#define SWIGTYPE_p_comptonsoft__ConstructDetectorForSimulation swig_types[32]
#define SWIGTYPE_p_comptonsoft__CorrectPHA swig_types[33]
#define SWIGTYPE_p_comptonsoft__DumpMass swig_types[34]
#define SWIGTYPE_p_comptonsoft__EfficiencyMapSky swig_types[35]
#define SWIGTYPE_p_comptonsoft__EventReconstruction swig_types[36]
#define SWIGTYPE_p_comptonsoft__EventSelection swig_types[37]
#define SWIGTYPE_p_comptonsoft__HXIEventSelection swig_types[38]
#define SWIGTYPE_p_comptonsoft__HistogramARM swig_types[39]
#define SWIGTYPE_p_comptonsoft__HistogramARMByPositionMeasurement swig_types[40]
#define SWIGTYPE_p_comptonsoft__HistogramAzimuthAngle swig_types[41]
#define SWIGTYPE_p_comptonsoft__HistogramEnergy2D swig_types[42]
#define SWIGTYPE_p_comptonsoft__HistogramEnergySpectrum swig_types[43]
#define SWIGTYPE_p_comptonsoft__HistogramPHA swig_types[44]
#define SWIGTYPE_p_comptonsoft__InitialConditionFilter swig_types[45]
#define SWIGTYPE_p_comptonsoft__InitialParticleTree swig_types[46]
#define SWIGTYPE_p_comptonsoft__KillStepPickUpData swig_types[47]
#define SWIGTYPE_p_comptonsoft__MakeDetectorHits swig_types[48]
#define SWIGTYPE_p_comptonsoft__MakeDetectorHitsTR swig_types[49]
#define SWIGTYPE_p_comptonsoft__MakeRawHits swig_types[50]
#define SWIGTYPE_p_comptonsoft__MaterialSamplePickUpData swig_types[51]
#define SWIGTYPE_p_comptonsoft__PhysicsListManager swig_types[52]
#define SWIGTYPE_p_comptonsoft__QuickAnalysisForDSD swig_types[53]
#define SWIGTYPE_p_comptonsoft__RDPickUpData swig_types[54]
#define SWIGTYPE_p_comptonsoft__ReadComptonEventTree swig_types[55]
#define SWIGTYPE_p_comptonsoft__ReadDataFile swig_types[56]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_NB0 swig_types[57]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_NT swig_types[58]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_SpW2 swig_types[59]
#define SWIGTYPE_p_comptonsoft__ReadDataFile_VME3 swig_types[60]
#define SWIGTYPE_p_comptonsoft__ReadEventTree swig_types[61]
#define SWIGTYPE_p_comptonsoft__ReadEventTreeAsDetectorHits swig_types[62]
#define SWIGTYPE_p_comptonsoft__ReadEventTreeAsRawHits swig_types[63]
#define SWIGTYPE_p_comptonsoft__ReadHitTree swig_types[64]
#define SWIGTYPE_p_comptonsoft__ReadHitTreeAsDetectorHits swig_types[65]
#define SWIGTYPE_p_comptonsoft__ReadHitTreeAsRawHits swig_types[66]
#define SWIGTYPE_p_comptonsoft__RecalculateEPI swig_types[67]
#define SWIGTYPE_p_comptonsoft__RecalculateSimulationNoise swig_types[68]
#define SWIGTYPE_p_comptonsoft__ResponseMatrix swig_types[69]
#define SWIGTYPE_p_comptonsoft__SaveData swig_types[70]
#define SWIGTYPE_p_comptonsoft__ScatteringPickUpData swig_types[71]
#define SWIGTYPE_p_comptonsoft__SelectFullDeposit swig_types[72]
#define SWIGTYPE_p_comptonsoft__SelectHits swig_types[73]
#define SWIGTYPE_p_comptonsoft__SelectTime swig_types[74]
#define SWIGTYPE_p_comptonsoft__SetBadChannels swig_types[75]
#define SWIGTYPE_p_comptonsoft__SetChannelsInfo swig_types[76]
#define SWIGTYPE_p_comptonsoft__SetNoiseLevels swig_types[77]
#define SWIGTYPE_p_comptonsoft__VCSModule swig_types[78]
#define SWIGTYPE_p_comptonsoft__WriteComptonEventTree swig_types[79]
#define SWIGTYPE_p_comptonsoft__WriteEventTree swig_types[80]
#define SWIGTYPE_p_comptonsoft__WriteHitTree swig_types[81]
#define SWIGTYPE_p_const_reference swig_types[82]
#define SWIGTYPE_p_difference_type swig_types[83]
#define SWIGTYPE_p_oistapp__OIST1DHistogram swig_types[84]
#define SWIGTYPE_p_oistapp__OISTComptonEventTreeIO swig_types[85]
#define SWIGTYPE_p_oistapp__OISTComptonEventTreeIOWithInitialInfo swig_types[86]
#define SWIGTYPE_p_oistapp__OISTDetectorImage swig_types[87]
#define SWIGTYPE_p_oistapp__OISTDetectorImage_OISTCdTe swig_types[88]
#define SWIGTYPE_p_oistapp__OISTHitTreeIO swig_types[89]
#define SWIGTYPE_p_oistapp__OISTHitTreeIOWithInitialInfo swig_types[90]
#define SWIGTYPE_p_oistapp__OISTMakeDetectorHits swig_types[91]
#define SWIGTYPE_p_oistapp__OISTMakeDetectorHits_COMP swig_types[92]
#define SWIGTYPE_p_oistapp__OISTMakeDetectorHits_Muon swig_types[93]
#define SWIGTYPE_p_oistapp__OISTMakeDetectorHits_OISTCdTe swig_types[94]
#define SWIGTYPE_p_oistapp__OISTPrimaryGen2DPhantom swig_types[95]
#define SWIGTYPE_p_oistapp__OISTPrimaryGen3DPhantom swig_types[96]
#define SWIGTYPE_p_oistapp__OISTPrimaryGenUltraMicroPhantom swig_types[97]
#define SWIGTYPE_p_oistapp__OISTReadDataFile_COMP swig_types[98]
#define SWIGTYPE_p_oistapp__OISTReadDataFile_Muon swig_types[99]
#define SWIGTYPE_p_oistapp__OISTReadDataFile_Muon2 swig_types[100]
#define SWIGTYPE_p_oistapp__OISTReadDataFile_NT swig_types[101]
#define SWIGTYPE_p_oistapp__OISTReadHitTree swig_types[102]
#define SWIGTYPE_p_oistapp__OISTWriteComptonEventTree swig_types[103]
#define SWIGTYPE_p_oistapp__OISTWriteHitTree swig_types[104]
#define SWIGTYPE_p_reference swig_types[105]
#define SWIGTYPE_p_size_type swig_types[106]
#define SWIGTYPE_p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t swig_types[107]
#define SWIGTYPE_p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator swig_types[108]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator swig_types[109]
#define SWIGTYPE_p_std__shared_ptrT_anl__VModuleParameter_t swig_types[110]
#define SWIGTYPE_p_value_type swig_types[111]
static swig_type_info *swig_types[113];
static swig_module_info swig_module = {swig_types, 112, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_oISTapp
#define SWIG_name    "OISTapp"

static VALUE mOISTapp;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#include "OISTPrimaryGen2DPhantom.hh"
#include "OISTPrimaryGen3DPhantom.hh"
#include "OISTPrimaryGenUltraMicroPhantom.hh"
#include "OISTDetectorImage.hh"
#include "OISTDetectorImage_OISTCdTe.hh"
#include "OISTReadDataFile_NT.hh"
#include "OISTReadDataFile_Muon.hh"
#include "OISTReadDataFile_Muon2.hh"
#include "OIST1DHistogram.hh"
#include "OISTMakeDetectorHits.hh"
#include "OISTMakeDetectorHits_OISTCdTe.hh"
#include "OISTMakeDetectorHits_Muon.hh"
#include "OISTHitTreeIO.hh"
#include "OISTHitTreeIOWithInitialInfo.hh"
#include "OISTMakeDetectorHits_COMP.hh"
#include "OISTReadDataFile_COMP.hh"
#include "OISTWriteHitTree.hh"
#include "OISTComptonEventTreeIO.hh"
#include "OISTComptonEventTreeIOWithInitialInfo.hh"
#include "OISTReadHitTree.hh"
#include "OISTWriteComptonEventTree.hh"  
#include "class_list_anlGeant4.hh"
#include "class_list_comptonSoft.hh"



#include <string>


#include <stddef.h>


namespace swig {
  class SwigGCReferences {
    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      SwigGCReferences &s_references = instance();
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      // Hash of all GC_VALUE's currently in use
      static SwigGCReferences s_references;

      return s_references;
    }
    static void initialize() {
      SwigGCReferences &s_references = instance();
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(_hash, obj, INT2NUM(n));
        else
          rb_hash_delete(_hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                       (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>


namespace swig {
  template < class T >
  struct yield
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  resize(Sequence *seq, typename Sequence::size_type n, typename Sequence::value_type x) {
    seq->resize(n, x);
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, (i == size && j == size));
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}

static swig_class SwigClassOISTPrimaryGen2DPhantom;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTPrimaryGen2DPhantom_allocate(VALUE self)
#else
_wrap_OISTPrimaryGen2DPhantom_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTPrimaryGen2DPhantom);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTPrimaryGen2DPhantom(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTPrimaryGen2DPhantom *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTPrimaryGen2DPhantom *)new oistapp::OISTPrimaryGen2DPhantom();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTPrimaryGen2DPhantom(void *self) {
    oistapp::OISTPrimaryGen2DPhantom *arg1 = (oistapp::OISTPrimaryGen2DPhantom *)self;
    delete arg1;
}

static swig_class SwigClassOISTPrimaryGen3DPhantom;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTPrimaryGen3DPhantom_allocate(VALUE self)
#else
_wrap_OISTPrimaryGen3DPhantom_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTPrimaryGen3DPhantom);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTPrimaryGen3DPhantom(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTPrimaryGen3DPhantom *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTPrimaryGen3DPhantom *)new oistapp::OISTPrimaryGen3DPhantom();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTPrimaryGen3DPhantom(void *self) {
    oistapp::OISTPrimaryGen3DPhantom *arg1 = (oistapp::OISTPrimaryGen3DPhantom *)self;
    delete arg1;
}

static swig_class SwigClassOISTPrimaryGenUltraMicroPhantom;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTPrimaryGenUltraMicroPhantom_allocate(VALUE self)
#else
_wrap_OISTPrimaryGenUltraMicroPhantom_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTPrimaryGenUltraMicroPhantom);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTPrimaryGenUltraMicroPhantom(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTPrimaryGenUltraMicroPhantom *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTPrimaryGenUltraMicroPhantom *)new oistapp::OISTPrimaryGenUltraMicroPhantom();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTPrimaryGenUltraMicroPhantom(void *self) {
    oistapp::OISTPrimaryGenUltraMicroPhantom *arg1 = (oistapp::OISTPrimaryGenUltraMicroPhantom *)self;
    delete arg1;
}

static swig_class SwigClassOISTDetectorImage;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTDetectorImage_allocate(VALUE self)
#else
_wrap_OISTDetectorImage_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTDetectorImage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTDetectorImage(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTDetectorImage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTDetectorImage *)new oistapp::OISTDetectorImage();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTDetectorImage(void *self) {
    oistapp::OISTDetectorImage *arg1 = (oistapp::OISTDetectorImage *)self;
    delete arg1;
}

static swig_class SwigClassOISTDetectorImage_OISTCdTe;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTDetectorImage_OISTCdTe_allocate(VALUE self)
#else
_wrap_OISTDetectorImage_OISTCdTe_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTDetectorImage_OISTCdTe);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTDetectorImage_OISTCdTe(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTDetectorImage_OISTCdTe *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTDetectorImage_OISTCdTe *)new oistapp::OISTDetectorImage_OISTCdTe();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTDetectorImage_OISTCdTe(void *self) {
    oistapp::OISTDetectorImage_OISTCdTe *arg1 = (oistapp::OISTDetectorImage_OISTCdTe *)self;
    delete arg1;
}

static swig_class SwigClassOISTReadDataFile_NT;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTReadDataFile_NT_allocate(VALUE self)
#else
_wrap_OISTReadDataFile_NT_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTReadDataFile_NT);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTReadDataFile_NT(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTReadDataFile_NT *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTReadDataFile_NT *)new oistapp::OISTReadDataFile_NT();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTReadDataFile_NT(void *self) {
    oistapp::OISTReadDataFile_NT *arg1 = (oistapp::OISTReadDataFile_NT *)self;
    delete arg1;
}

static swig_class SwigClassOISTReadDataFile_Muon;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTReadDataFile_Muon_allocate(VALUE self)
#else
_wrap_OISTReadDataFile_Muon_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTReadDataFile_Muon);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTReadDataFile_Muon(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTReadDataFile_Muon *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTReadDataFile_Muon *)new oistapp::OISTReadDataFile_Muon();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTReadDataFile_Muon(void *self) {
    oistapp::OISTReadDataFile_Muon *arg1 = (oistapp::OISTReadDataFile_Muon *)self;
    delete arg1;
}

static swig_class SwigClassOISTReadDataFile_Muon2;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTReadDataFile_Muon2_allocate(VALUE self)
#else
_wrap_OISTReadDataFile_Muon2_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTReadDataFile_Muon2);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTReadDataFile_Muon2(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTReadDataFile_Muon2 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTReadDataFile_Muon2 *)new oistapp::OISTReadDataFile_Muon2();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTReadDataFile_Muon2(void *self) {
    oistapp::OISTReadDataFile_Muon2 *arg1 = (oistapp::OISTReadDataFile_Muon2 *)self;
    delete arg1;
}

static swig_class SwigClassOIST1DHistogram;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OIST1DHistogram_allocate(VALUE self)
#else
_wrap_OIST1DHistogram_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OIST1DHistogram);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OIST1DHistogram(int argc, VALUE *argv, VALUE self) {
  oistapp::OIST1DHistogram *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OIST1DHistogram *)new oistapp::OIST1DHistogram();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OIST1DHistogram(void *self) {
    oistapp::OIST1DHistogram *arg1 = (oistapp::OIST1DHistogram *)self;
    delete arg1;
}

static swig_class SwigClassOISTMakeDetectorHits;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTMakeDetectorHits_allocate(VALUE self)
#else
_wrap_OISTMakeDetectorHits_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTMakeDetectorHits);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTMakeDetectorHits(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTMakeDetectorHits *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTMakeDetectorHits *)new oistapp::OISTMakeDetectorHits();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTMakeDetectorHits(void *self) {
    oistapp::OISTMakeDetectorHits *arg1 = (oistapp::OISTMakeDetectorHits *)self;
    delete arg1;
}

static swig_class SwigClassOISTMakeDetectorHits_OISTCdTe;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTMakeDetectorHits_OISTCdTe_allocate(VALUE self)
#else
_wrap_OISTMakeDetectorHits_OISTCdTe_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTMakeDetectorHits_OISTCdTe);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTMakeDetectorHits_OISTCdTe(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTMakeDetectorHits_OISTCdTe *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTMakeDetectorHits_OISTCdTe *)new oistapp::OISTMakeDetectorHits_OISTCdTe();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTMakeDetectorHits_OISTCdTe(void *self) {
    oistapp::OISTMakeDetectorHits_OISTCdTe *arg1 = (oistapp::OISTMakeDetectorHits_OISTCdTe *)self;
    delete arg1;
}

static swig_class SwigClassOISTMakeDetectorHits_Muon;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTMakeDetectorHits_Muon_allocate(VALUE self)
#else
_wrap_OISTMakeDetectorHits_Muon_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTMakeDetectorHits_Muon);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTMakeDetectorHits_Muon(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTMakeDetectorHits_Muon *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTMakeDetectorHits_Muon *)new oistapp::OISTMakeDetectorHits_Muon();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTMakeDetectorHits_Muon(void *self) {
    oistapp::OISTMakeDetectorHits_Muon *arg1 = (oistapp::OISTMakeDetectorHits_Muon *)self;
    delete arg1;
}

static swig_class SwigClassOISTHitTreeIO;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTHitTreeIO_allocate(VALUE self)
#else
_wrap_OISTHitTreeIO_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTHitTreeIO);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTHitTreeIO(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTHitTreeIO *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTHitTreeIO *)new oistapp::OISTHitTreeIO();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTHitTreeIO(void *self) {
    oistapp::OISTHitTreeIO *arg1 = (oistapp::OISTHitTreeIO *)self;
    delete arg1;
}

static swig_class SwigClassOISTHitTreeIOWithInitialInfo;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTHitTreeIOWithInitialInfo_allocate(VALUE self)
#else
_wrap_OISTHitTreeIOWithInitialInfo_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTHitTreeIOWithInitialInfo);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTHitTreeIOWithInitialInfo(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTHitTreeIOWithInitialInfo *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTHitTreeIOWithInitialInfo *)new oistapp::OISTHitTreeIOWithInitialInfo();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTHitTreeIOWithInitialInfo(void *self) {
    oistapp::OISTHitTreeIOWithInitialInfo *arg1 = (oistapp::OISTHitTreeIOWithInitialInfo *)self;
    delete arg1;
}

static swig_class SwigClassOISTMakeDetectorHits_COMP;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTMakeDetectorHits_COMP_allocate(VALUE self)
#else
_wrap_OISTMakeDetectorHits_COMP_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTMakeDetectorHits_COMP);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTMakeDetectorHits_COMP(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTMakeDetectorHits_COMP *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTMakeDetectorHits_COMP *)new oistapp::OISTMakeDetectorHits_COMP();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTMakeDetectorHits_COMP(void *self) {
    oistapp::OISTMakeDetectorHits_COMP *arg1 = (oistapp::OISTMakeDetectorHits_COMP *)self;
    delete arg1;
}

static swig_class SwigClassOISTReadDataFile_COMP;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTReadDataFile_COMP_allocate(VALUE self)
#else
_wrap_OISTReadDataFile_COMP_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTReadDataFile_COMP);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTReadDataFile_COMP(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTReadDataFile_COMP *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTReadDataFile_COMP *)new oistapp::OISTReadDataFile_COMP();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTReadDataFile_COMP(void *self) {
    oistapp::OISTReadDataFile_COMP *arg1 = (oistapp::OISTReadDataFile_COMP *)self;
    delete arg1;
}

static swig_class SwigClassOISTWriteHitTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTWriteHitTree_allocate(VALUE self)
#else
_wrap_OISTWriteHitTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTWriteHitTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTWriteHitTree(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTWriteHitTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTWriteHitTree *)new oistapp::OISTWriteHitTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTWriteHitTree(void *self) {
    oistapp::OISTWriteHitTree *arg1 = (oistapp::OISTWriteHitTree *)self;
    delete arg1;
}

static swig_class SwigClassOISTComptonEventTreeIO;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTComptonEventTreeIO_allocate(VALUE self)
#else
_wrap_OISTComptonEventTreeIO_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTComptonEventTreeIO);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTComptonEventTreeIO(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTComptonEventTreeIO *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTComptonEventTreeIO *)new oistapp::OISTComptonEventTreeIO();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTComptonEventTreeIO(void *self) {
    oistapp::OISTComptonEventTreeIO *arg1 = (oistapp::OISTComptonEventTreeIO *)self;
    delete arg1;
}

static swig_class SwigClassOISTComptonEventTreeIOWithInitialInfo;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTComptonEventTreeIOWithInitialInfo_allocate(VALUE self)
#else
_wrap_OISTComptonEventTreeIOWithInitialInfo_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTComptonEventTreeIOWithInitialInfo);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTComptonEventTreeIOWithInitialInfo(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTComptonEventTreeIOWithInitialInfo *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTComptonEventTreeIOWithInitialInfo *)new oistapp::OISTComptonEventTreeIOWithInitialInfo();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTComptonEventTreeIOWithInitialInfo(void *self) {
    oistapp::OISTComptonEventTreeIOWithInitialInfo *arg1 = (oistapp::OISTComptonEventTreeIOWithInitialInfo *)self;
    delete arg1;
}

static swig_class SwigClassOISTReadHitTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTReadHitTree_allocate(VALUE self)
#else
_wrap_OISTReadHitTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTReadHitTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTReadHitTree(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTReadHitTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTReadHitTree *)new oistapp::OISTReadHitTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTReadHitTree(void *self) {
    oistapp::OISTReadHitTree *arg1 = (oistapp::OISTReadHitTree *)self;
    delete arg1;
}

static swig_class SwigClassOISTWriteComptonEventTree;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_OISTWriteComptonEventTree_allocate(VALUE self)
#else
_wrap_OISTWriteComptonEventTree_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_oistapp__OISTWriteComptonEventTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_OISTWriteComptonEventTree(int argc, VALUE *argv, VALUE self) {
  oistapp::OISTWriteComptonEventTree *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (oistapp::OISTWriteComptonEventTree *)new oistapp::OISTWriteComptonEventTree();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_oistapp_OISTWriteComptonEventTree(void *self) {
    oistapp::OISTWriteComptonEventTree *arg1 = (oistapp::OISTWriteComptonEventTree *)self;
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((comptonsoft::AnalyzeHits *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_OISTCdTeTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((oistapp::OISTMakeDetectorHits_OISTCdTe *) x));
}
static void *_p_comptonsoft__MakeRawHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((comptonsoft::MakeRawHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTRTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *) (comptonsoft::MakeDetectorHits *) ((comptonsoft::MakeDetectorHitsTR *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_MuonTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((oistapp::OISTMakeDetectorHits_Muon *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_COMPTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((oistapp::OISTMakeDetectorHits_COMP *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((comptonsoft::MakeDetectorHits *) x));
}
static void *_p_oistapp__OISTMakeDetectorHitsTo_p_comptonsoft__SelectHits(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::SelectHits *)  ((oistapp::OISTMakeDetectorHits *) x));
}
static void *_p_comptonsoft__ReadComptonEventTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::EventReconstruction *) ((comptonsoft::ReadComptonEventTree *) x));
}
static void *_p_comptonsoft__WriteComptonEventTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteComptonEventTree *) x));
}
static void *_p_comptonsoft__ReadEventTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ReadEventTree *) x));
}
static void *_p_comptonsoft__WriteEventTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteEventTree *) x));
}
static void *_p_comptonsoft__InitialParticleTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::InitialParticleTree *) x));
}
static void *_p_oistapp__OISTWriteComptonEventTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((oistapp::OISTWriteComptonEventTree *) x));
}
static void *_p_oistapp__OISTReadDataFile_MuonTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_Muon *) x));
}
static void *_p_comptonsoft__ReadDataFile_NTTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NT *) x));
}
static void *_p_oistapp__OISTReadDataFile_NTTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_NT *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_MuonTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits_Muon *) x));
}
static void *_p_comptonsoft__ConstructDetectorTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::ConstructDetector *) x));
}
static void *_p_anlgeant4__Geant4BodyTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((anlgeant4::Geant4Body *) x));
}
static void *_p_comptonsoft__SelectHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SelectHits *) x));
}
static void *_p_oistapp__OISTPrimaryGen2DPhantomTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((oistapp::OISTPrimaryGen2DPhantom *) x));
}
static void *_p_oistapp__OISTPrimaryGen3DPhantomTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((oistapp::OISTPrimaryGen3DPhantom *) x));
}
static void *_p_oistapp__OISTPrimaryGenUltraMicroPhantomTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((oistapp::OISTPrimaryGenUltraMicroPhantom *) x));
}
static void *_p_comptonsoft__CorrectPHATo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::CorrectPHA *) x));
}
static void *_p_comptonsoft__BackProjectionSkyTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::BackProjection *) ((comptonsoft::BackProjectionSky *) x));
}
static void *_p_comptonsoft__HistogramPHATo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramPHA *) x));
}
static void *_p_comptonsoft__ReadDataFile_NB0To_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NB0 *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::NucleusPrimaryGen *) x));
}
static void *_p_anlgeant4__IsotropicPrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::IsotropicPrimaryGen *) x));
}
static void *_p_anlgeant4__GaussianBeamPrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::GaussianBeamPrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::PlaneWaveRectanglePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWavePrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::PlaneWavePrimaryGen *) x));
}
static void *_p_anlgeant4__PointSourcePrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *) ((anlgeant4::PointSourcePrimaryGen *) x));
}
static void *_p_anlgeant4__BasicPrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *) ((anlgeant4::BasicPrimaryGen *) x));
}
static void *_p_anlgeant4__VANLPrimaryGenTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((anlgeant4::VANLPrimaryGen *) x));
}
static void *_p_comptonsoft__ComptonModeFilterTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ComptonModeFilter *) x));
}
static void *_p_comptonsoft__ConstructDetectorForSimulationTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::ConstructDetector *) ((comptonsoft::ConstructDetectorForSimulation *) x));
}
static void *_p_comptonsoft__AssignG4CopyNumberTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::AssignG4CopyNumber *) x));
}
static void *_p_comptonsoft__CalculatePedestalLevelsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::CalculatePedestalLevels *) x));
}
static void *_p_comptonsoft__HistogramEnergy2DTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramEnergy2D *) x));
}
static void *_p_comptonsoft__AnalyzeHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((comptonsoft::AnalyzeHits *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadEventTree *)(comptonsoft::ReadEventTreeAsRawHits *) ((comptonsoft::ReadEventTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadHitTree *)(comptonsoft::ReadHitTreeAsRawHits *) ((comptonsoft::ReadHitTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((comptonsoft::MakeDetectorHits *) x));
}
static void *_p_oistapp__OISTMakeDetectorHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits *) x));
}
static void *_p_comptonsoft__ApplyEPICompensationTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ApplyEPICompensation *) x));
}
static void *_p_comptonsoft__SelectFullDepositTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::SelectFullDeposit *) x));
}
static void *_p_comptonsoft__ReadHitTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ReadHitTree *) x));
}
static void *_p_comptonsoft__WriteHitTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::WriteHitTree *) x));
}
static void *_p_comptonsoft__ReadDataFile_SpW2To_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_SpW2 *) x));
}
static void *_p_oistapp__OISTWriteHitTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((oistapp::OISTWriteHitTree *) x));
}
static void *_p_oistapp__OISTReadHitTreeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((oistapp::OISTReadHitTree *) x));
}
static void *_p_comptonsoft__RecalculateEPITo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::CorrectPHA *) ((comptonsoft::RecalculateEPI *) x));
}
static void *_p_oistapp__OISTReadDataFile_COMPTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_COMP *) x));
}
static void *_p_comptonsoft__SelectTimeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::SelectTime *) x));
}
static void *_p_comptonsoft__SetBadChannelsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetBadChannels *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_COMPTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits_COMP *) x));
}
static void *_p_comptonsoft__QuickAnalysisForDSDTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::QuickAnalysisForDSD *) x));
}
static void *_p_comptonsoft__ComptonEventFilterTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::ComptonEventFilter *) x));
}
static void *_p_comptonsoft__InitialConditionFilterTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::InitialConditionFilter *) x));
}
static void *_p_anlgeant4__Geant4SimpleTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((anlgeant4::Geant4Simple *) x));
}
static void *_p_comptonsoft__BackProjectionTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::BackProjection *) x));
}
static void *_p_comptonsoft__CSHitCollectionTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::CSHitCollection *) x));
}
static void *_p_comptonsoft__EventSelectionTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::EventSelection *) x));
}
static void *_p_comptonsoft__HXIEventSelectionTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HXIEventSelection *) x));
}
static void *_p_oistapp__OISTDetectorImage_OISTCdTeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((oistapp::OISTDetectorImage_OISTCdTe *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_OISTCdTeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits_OISTCdTe *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::NucleusPrimaryGen *) ((anlgeant4::NucleusPrimaryGenInVolume *) x));
}
static void *_p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPrimaryGen *)(anlgeant4::BasicPrimaryGen *)(anlgeant4::PointSourcePrimaryGen *) ((anlgeant4::PrimaryGenUniformSourceInVolume *) x));
}
static void *_p_comptonsoft__SaveDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::SaveData *) x));
}
static void *_p_comptonsoft__HistogramEnergySpectrumTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramEnergySpectrum *) x));
}
static void *_p_comptonsoft__HistogramAzimuthAngleTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramAzimuthAngle *) x));
}
static void *_p_anlgeant4__VANLGeometryTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((anlgeant4::VANLGeometry *) x));
}
static void *_p_comptonsoft__SetChannelsInfoTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetChannelsInfo *) x));
}
static void *_p_comptonsoft__EfficiencyMapSkyTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::BackProjection *) ((comptonsoft::EfficiencyMapSky *) x));
}
static void *_p_oistapp__OIST1DHistogramTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((oistapp::OIST1DHistogram *) x));
}
static void *_p_anlgeant4__VANLPhysicsListTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((anlgeant4::VANLPhysicsList *) x));
}
static void *_p_comptonsoft__ConstructChannelMapTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ConstructChannelMap *) x));
}
static void *_p_comptonsoft__PhysicsListManagerTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VANLPhysicsList *) ((comptonsoft::PhysicsListManager *) x));
}
static void *_p_comptonsoft__VCSModuleTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::VCSModule *) x));
}
static void *_p_oistapp__OISTDetectorImageTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((oistapp::OISTDetectorImage *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsRawHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadEventTree *) ((comptonsoft::ReadEventTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsRawHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadHitTree *) ((comptonsoft::ReadHitTreeAsRawHits *) x));
}
static void *_p_comptonsoft__MakeRawHitsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *) ((comptonsoft::MakeRawHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTRTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::SelectHits *)(comptonsoft::MakeDetectorHits *) ((comptonsoft::MakeDetectorHitsTR *) x));
}
static void *_p_comptonsoft__HistogramARMByPositionMeasurementTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::HistogramARM *) ((comptonsoft::HistogramARMByPositionMeasurement *) x));
}
static void *_p_comptonsoft__ResponseMatrixTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ResponseMatrix *) x));
}
static void *_p_comptonsoft__MaterialSamplePickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VPickUpData *)(anlgeant4::StandardPickUpData *) ((comptonsoft::MaterialSamplePickUpData *) x));
}
static void *_p_comptonsoft__KillStepPickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VPickUpData *)(anlgeant4::StandardPickUpData *) ((comptonsoft::KillStepPickUpData *) x));
}
static void *_p_comptonsoft__ActivationPickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VPickUpData *)(anlgeant4::StandardPickUpData *) ((comptonsoft::ActivationPickUpData *) x));
}
static void *_p_comptonsoft__RDPickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VPickUpData *)(anlgeant4::StandardPickUpData *) ((comptonsoft::RDPickUpData *) x));
}
static void *_p_anlgeant4__VPickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((anlgeant4::VPickUpData *) x));
}
static void *_p_anlgeant4__StandardPickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VPickUpData *) ((anlgeant4::StandardPickUpData *) x));
}
static void *_p_comptonsoft__ReadDataFile_VME3To_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_VME3 *) x));
}
static void *_p_comptonsoft__ScatteringPickUpDataTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (anlgeant4::VPickUpData *)(anlgeant4::StandardPickUpData *) ((comptonsoft::ScatteringPickUpData *) x));
}
static void *_p_comptonsoft__SetNoiseLevelsTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::SetNoiseLevels *) x));
}
static void *_p_comptonsoft__EventReconstructionTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::EventReconstruction *) x));
}
static void *_p_comptonsoft__RecalculateSimulationNoiseTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::RecalculateSimulationNoise *) x));
}
static void *_p_oistapp__OISTReadDataFile_Muon2To_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *)(comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_Muon2 *) x));
}
static void *_p_comptonsoft__HistogramARMTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::HistogramARM *) x));
}
static void *_p_comptonsoft__ReadDataFileTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *) (comptonsoft::VCSModule *) ((comptonsoft::ReadDataFile *) x));
}
static void *_p_comptonsoft__DumpMassTo_p_anl__BasicModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anl::BasicModule *)  ((comptonsoft::DumpMass *) x));
}
static void *_p_comptonsoft__ConstructChannelMapTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ConstructChannelMap *) x));
}
static void *_p_comptonsoft__ResponseMatrixTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ResponseMatrix *) x));
}
static void *_p_comptonsoft__SetBadChannelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetBadChannels *) x));
}
static void *_p_comptonsoft__HistogramPHATo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramPHA *) x));
}
static void *_p_comptonsoft__HistogramARMByPositionMeasurementTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::HistogramARM *) ((comptonsoft::HistogramARMByPositionMeasurement *) x));
}
static void *_p_oistapp__OISTDetectorImage_OISTCdTeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((oistapp::OISTDetectorImage_OISTCdTe *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_OISTCdTeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits_OISTCdTe *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_COMPTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits_COMP *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsRawHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadEventTree *) ((comptonsoft::ReadEventTreeAsRawHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsRawHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadHitTree *) ((comptonsoft::ReadHitTreeAsRawHits *) x));
}
static void *_p_comptonsoft__MakeRawHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((comptonsoft::MakeRawHits *) x));
}
static void *_p_comptonsoft__ApplyEPICompensationTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ApplyEPICompensation *) x));
}
static void *_p_comptonsoft__ComptonModeFilterTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ComptonModeFilter *) x));
}
static void *_p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NT *) x));
}
static void *_p_oistapp__OISTReadDataFile_NTTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_NT *) x));
}
static void *_p_oistapp__OISTMakeDetectorHits_MuonTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits_Muon *) x));
}
static void *_p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadEventTree *)(comptonsoft::ReadEventTreeAsRawHits *) ((comptonsoft::ReadEventTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadHitTree *)(comptonsoft::ReadHitTreeAsRawHits *) ((comptonsoft::ReadHitTreeAsDetectorHits *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((comptonsoft::MakeDetectorHits *) x));
}
static void *_p_comptonsoft__SelectHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SelectHits *) x));
}
static void *_p_oistapp__OISTMakeDetectorHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((oistapp::OISTMakeDetectorHits *) x));
}
static void *_p_comptonsoft__RecalculateSimulationNoiseTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::RecalculateSimulationNoise *) x));
}
static void *_p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_VME3 *) x));
}
static void *_p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *) ((comptonsoft::AnalyzeHits *) x));
}
static void *_p_comptonsoft__EventSelectionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::EventSelection *) x));
}
static void *_p_comptonsoft__HXIEventSelectionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HXIEventSelection *) x));
}
static void *_p_comptonsoft__BackProjectionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::BackProjection *) x));
}
static void *_p_comptonsoft__ReadComptonEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::EventReconstruction *) ((comptonsoft::ReadComptonEventTree *) x));
}
static void *_p_comptonsoft__WriteComptonEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteComptonEventTree *) x));
}
static void *_p_comptonsoft__ReadEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ReadEventTree *) x));
}
static void *_p_comptonsoft__WriteEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteEventTree *) x));
}
static void *_p_comptonsoft__EfficiencyMapSkyTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::BackProjection *) ((comptonsoft::EfficiencyMapSky *) x));
}
static void *_p_oistapp__OISTReadDataFile_Muon2To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_Muon2 *) x));
}
static void *_p_oistapp__OISTWriteComptonEventTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((oistapp::OISTWriteComptonEventTree *) x));
}
static void *_p_comptonsoft__BackProjectionSkyTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::BackProjection *) ((comptonsoft::BackProjectionSky *) x));
}
static void *_p_comptonsoft__CorrectPHATo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::CorrectPHA *) x));
}
static void *_p_oistapp__OISTReadDataFile_COMPTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_COMP *) x));
}
static void *_p_comptonsoft__HistogramEnergy2DTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramEnergy2D *) x));
}
static void *_p_comptonsoft__HistogramEnergySpectrumTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramEnergySpectrum *) x));
}
static void *_p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_SpW2 *) x));
}
static void *_p_oistapp__OISTReadDataFile_MuonTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((oistapp::OISTReadDataFile_Muon *) x));
}
static void *_p_comptonsoft__MakeDetectorHitsTRTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::SelectHits *)(comptonsoft::MakeDetectorHits *) ((comptonsoft::MakeDetectorHitsTR *) x));
}
static void *_p_comptonsoft__CalculatePedestalLevelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::CalculatePedestalLevels *) x));
}
static void *_p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::ReadDataFile *) ((comptonsoft::ReadDataFile_NB0 *) x));
}
static void *_p_comptonsoft__HistogramAzimuthAngleTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramAzimuthAngle *) x));
}
static void *_p_oistapp__OIST1DHistogramTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((oistapp::OIST1DHistogram *) x));
}
static void *_p_comptonsoft__RecalculateEPITo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *) (comptonsoft::CorrectPHA *) ((comptonsoft::RecalculateEPI *) x));
}
static void *_p_comptonsoft__InitialParticleTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::InitialParticleTree *) x));
}
static void *_p_comptonsoft__ReadDataFileTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ReadDataFile *) x));
}
static void *_p_comptonsoft__HistogramARMTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::HistogramARM *) x));
}
static void *_p_comptonsoft__ReadHitTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::ReadHitTree *) x));
}
static void *_p_comptonsoft__WriteHitTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::WriteHitTree *) x));
}
static void *_p_oistapp__OISTDetectorImageTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((oistapp::OISTDetectorImage *) x));
}
static void *_p_oistapp__OISTWriteHitTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((oistapp::OISTWriteHitTree *) x));
}
static void *_p_oistapp__OISTReadHitTreeTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((oistapp::OISTReadHitTree *) x));
}
static void *_p_comptonsoft__EventReconstructionTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::EventReconstruction *) x));
}
static void *_p_comptonsoft__SetChannelsInfoTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetChannelsInfo *) x));
}
static void *_p_comptonsoft__SetNoiseLevelsTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::SetNoiseLevels *) x));
}
static void *_p_comptonsoft__QuickAnalysisForDSDTo_p_comptonsoft__VCSModule(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::VCSModule *)  ((comptonsoft::QuickAnalysisForDSD *) x));
}
static void *_p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::PointSourcePrimaryGen *) ((anlgeant4::PrimaryGenUniformSourceInVolume *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::NucleusPrimaryGen *) ((anlgeant4::NucleusPrimaryGenInVolume *) x));
}
static void *_p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::PointSourcePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::PlaneWavePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::PlaneWaveRectanglePrimaryGen *) x));
}
static void *_p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::GaussianBeamPrimaryGen *) x));
}
static void *_p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::IsotropicPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((anlgeant4::NucleusPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *) (anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_oistapp__OISTPrimaryGen2DPhantomTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((oistapp::OISTPrimaryGen2DPhantom *) x));
}
static void *_p_oistapp__OISTPrimaryGen3DPhantomTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((oistapp::OISTPrimaryGen3DPhantom *) x));
}
static void *_p_oistapp__OISTPrimaryGenUltraMicroPhantomTo_p_anlgeant4__BasicPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::BasicPrimaryGen *)  ((oistapp::OISTPrimaryGenUltraMicroPhantom *) x));
}
static void *_p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::PointSourcePrimaryGen *) ((anlgeant4::PrimaryGenUniformSourceInVolume *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::NucleusPrimaryGen *) ((anlgeant4::NucleusPrimaryGenInVolume *) x));
}
static void *_p_anlgeant4__BasicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *)  ((anlgeant4::BasicPrimaryGen *) x));
}
static void *_p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::PointSourcePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::PlaneWavePrimaryGen *) x));
}
static void *_p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::PlaneWaveRectanglePrimaryGen *) x));
}
static void *_p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::PlaneWavePrimaryGen *) ((anlgeant4::GaussianBeamPrimaryGen *) x));
}
static void *_p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::IsotropicPrimaryGen *) x));
}
static void *_p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((anlgeant4::NucleusPrimaryGen *) x));
}
static void *_p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *)(anlgeant4::IsotropicPrimaryGen *) ((comptonsoft::AHRadiationBackgroundPrimaryGen *) x));
}
static void *_p_oistapp__OISTPrimaryGen2DPhantomTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((oistapp::OISTPrimaryGen2DPhantom *) x));
}
static void *_p_oistapp__OISTPrimaryGen3DPhantomTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((oistapp::OISTPrimaryGen3DPhantom *) x));
}
static void *_p_oistapp__OISTPrimaryGenUltraMicroPhantomTo_p_anlgeant4__VANLPrimaryGen(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((anlgeant4::VANLPrimaryGen *) (anlgeant4::BasicPrimaryGen *) ((oistapp::OISTPrimaryGenUltraMicroPhantom *) x));
}
static void *_p_oistapp__OISTHitTreeIOWithInitialInfoTo_p_oistapp__OISTHitTreeIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((oistapp::OISTHitTreeIO *)  ((oistapp::OISTHitTreeIOWithInitialInfo *) x));
}
static void *_p_oistapp__OISTComptonEventTreeIOWithInitialInfoTo_p_oistapp__OISTComptonEventTreeIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((oistapp::OISTComptonEventTreeIO *)  ((oistapp::OISTComptonEventTreeIOWithInitialInfo *) x));
}
static void *_p_oistapp__OISTReadDataFile_Muon2To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((oistapp::OISTReadDataFile_Muon2 *) x));
}
static void *_p_oistapp__OISTReadDataFile_MuonTo_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((oistapp::OISTReadDataFile_Muon *) x));
}
static void *_p_oistapp__OISTReadDataFile_COMPTo_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((oistapp::OISTReadDataFile_COMP *) x));
}
static void *_p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_SpW2 *) x));
}
static void *_p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_NT *) x));
}
static void *_p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_NB0 *) x));
}
static void *_p_oistapp__OISTReadDataFile_NTTo_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((oistapp::OISTReadDataFile_NT *) x));
}
static void *_p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__ReadDataFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((comptonsoft::ReadDataFile *)  ((comptonsoft::ReadDataFile_VME3 *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anl__BasicModule = {"_p_anl__BasicModule", "anl::BasicModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__InitialParticleTree = {"_p_comptonsoft__InitialParticleTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadComptonEventTree = {"_p_comptonsoft__ReadComptonEventTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteComptonEventTree = {"_p_comptonsoft__WriteComptonEventTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadEventTree = {"_p_comptonsoft__ReadEventTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteEventTree = {"_p_comptonsoft__WriteEventTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_NT = {"_p_comptonsoft__ReadDataFile_NT", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructDetector = {"_p_comptonsoft__ConstructDetector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__Geant4Body = {"_p_anlgeant4__Geant4Body", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__CorrectPHA = {"_p_comptonsoft__CorrectPHA", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__BackProjectionSky = {"_p_comptonsoft__BackProjectionSky", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramPHA = {"_p_comptonsoft__HistogramPHA", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_NB0 = {"_p_comptonsoft__ReadDataFile_NB0", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PointSourcePrimaryGen = {"_p_anlgeant4__PointSourcePrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen = {"_p_comptonsoft__AHRadiationBackgroundPrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__NucleusPrimaryGen = {"_p_anlgeant4__NucleusPrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__IsotropicPrimaryGen = {"_p_anlgeant4__IsotropicPrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__GaussianBeamPrimaryGen = {"_p_anlgeant4__GaussianBeamPrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen = {"_p_anlgeant4__PlaneWaveRectanglePrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PlaneWavePrimaryGen = {"_p_anlgeant4__PlaneWavePrimaryGen", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__AssignG4CopyNumber = {"_p_comptonsoft__AssignG4CopyNumber", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ComptonModeFilter = {"_p_comptonsoft__ComptonModeFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructDetectorForSimulation = {"_p_comptonsoft__ConstructDetectorForSimulation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__CalculatePedestalLevels = {"_p_comptonsoft__CalculatePedestalLevels", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramEnergy2D = {"_p_comptonsoft__HistogramEnergy2D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__AnalyzeHits = {"_p_comptonsoft__AnalyzeHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadEventTreeAsDetectorHits = {"_p_comptonsoft__ReadEventTreeAsDetectorHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadHitTreeAsDetectorHits = {"_p_comptonsoft__ReadHitTreeAsDetectorHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__MakeDetectorHits = {"_p_comptonsoft__MakeDetectorHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ApplyEPICompensation = {"_p_comptonsoft__ApplyEPICompensation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectFullDeposit = {"_p_comptonsoft__SelectFullDeposit", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadHitTree = {"_p_comptonsoft__ReadHitTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__WriteHitTree = {"_p_comptonsoft__WriteHitTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_SpW2 = {"_p_comptonsoft__ReadDataFile_SpW2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__RecalculateEPI = {"_p_comptonsoft__RecalculateEPI", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectTime = {"_p_comptonsoft__SelectTime", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__SetBadChannels = {"_p_comptonsoft__SetBadChannels", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__QuickAnalysisForDSD = {"_p_comptonsoft__QuickAnalysisForDSD", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ComptonEventFilter = {"_p_comptonsoft__ComptonEventFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__InitialConditionFilter = {"_p_comptonsoft__InitialConditionFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__Geant4Simple = {"_p_anlgeant4__Geant4Simple", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__BackProjection = {"_p_comptonsoft__BackProjection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__CSHitCollection = {"_p_comptonsoft__CSHitCollection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__EventSelection = {"_p_comptonsoft__EventSelection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HXIEventSelection = {"_p_comptonsoft__HXIEventSelection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__NucleusPrimaryGenInVolume = {"_p_anlgeant4__NucleusPrimaryGenInVolume", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume = {"_p_anlgeant4__PrimaryGenUniformSourceInVolume", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__SaveData = {"_p_comptonsoft__SaveData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramEnergySpectrum = {"_p_comptonsoft__HistogramEnergySpectrum", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramAzimuthAngle = {"_p_comptonsoft__HistogramAzimuthAngle", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__VANLGeometry = {"_p_anlgeant4__VANLGeometry", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__SetChannelsInfo = {"_p_comptonsoft__SetChannelsInfo", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__EfficiencyMapSky = {"_p_comptonsoft__EfficiencyMapSky", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__PhysicsListManager = {"_p_comptonsoft__PhysicsListManager", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__VANLPhysicsList = {"_p_anlgeant4__VANLPhysicsList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ConstructChannelMap = {"_p_comptonsoft__ConstructChannelMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__MakeRawHits = {"_p_comptonsoft__MakeRawHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadEventTreeAsRawHits = {"_p_comptonsoft__ReadEventTreeAsRawHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadHitTreeAsRawHits = {"_p_comptonsoft__ReadHitTreeAsRawHits", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__MakeDetectorHitsTR = {"_p_comptonsoft__MakeDetectorHitsTR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ResponseMatrix = {"_p_comptonsoft__ResponseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramARMByPositionMeasurement = {"_p_comptonsoft__HistogramARMByPositionMeasurement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile_VME3 = {"_p_comptonsoft__ReadDataFile_VME3", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__MaterialSamplePickUpData = {"_p_comptonsoft__MaterialSamplePickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__KillStepPickUpData = {"_p_comptonsoft__KillStepPickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ActivationPickUpData = {"_p_comptonsoft__ActivationPickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__RDPickUpData = {"_p_comptonsoft__RDPickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__VPickUpData = {"_p_anlgeant4__VPickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__StandardPickUpData = {"_p_anlgeant4__StandardPickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__ScatteringPickUpData = {"_p_comptonsoft__ScatteringPickUpData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__SetNoiseLevels = {"_p_comptonsoft__SetNoiseLevels", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__EventReconstruction = {"_p_comptonsoft__EventReconstruction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__RecalculateSimulationNoise = {"_p_comptonsoft__RecalculateSimulationNoise", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__HistogramARM = {"_p_comptonsoft__HistogramARM", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_comptonsoft__DumpMass = {"_p_comptonsoft__DumpMass", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_anlgeant4__BasicPrimaryGen = {"_p_anlgeant4__BasicPrimaryGen", "anlgeant4::BasicPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_anlgeant4__VANLPrimaryGen = {"_p_anlgeant4__VANLPrimaryGen", "anlgeant4::VANLPrimaryGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__ReadDataFile = {"_p_comptonsoft__ReadDataFile", "comptonsoft::ReadDataFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__SelectHits = {"_p_comptonsoft__SelectHits", "comptonsoft::SelectHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_comptonsoft__VCSModule = {"_p_comptonsoft__VCSModule", "comptonsoft::VCSModule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OIST1DHistogram = {"_p_oistapp__OIST1DHistogram", "oistapp::OIST1DHistogram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTComptonEventTreeIO = {"_p_oistapp__OISTComptonEventTreeIO", "oistapp::OISTComptonEventTreeIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTComptonEventTreeIOWithInitialInfo = {"_p_oistapp__OISTComptonEventTreeIOWithInitialInfo", "oistapp::OISTComptonEventTreeIOWithInitialInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTDetectorImage = {"_p_oistapp__OISTDetectorImage", "oistapp::OISTDetectorImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTDetectorImage_OISTCdTe = {"_p_oistapp__OISTDetectorImage_OISTCdTe", "oistapp::OISTDetectorImage_OISTCdTe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTHitTreeIO = {"_p_oistapp__OISTHitTreeIO", "oistapp::OISTHitTreeIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTHitTreeIOWithInitialInfo = {"_p_oistapp__OISTHitTreeIOWithInitialInfo", "oistapp::OISTHitTreeIOWithInitialInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTMakeDetectorHits = {"_p_oistapp__OISTMakeDetectorHits", "oistapp::OISTMakeDetectorHits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTMakeDetectorHits_COMP = {"_p_oistapp__OISTMakeDetectorHits_COMP", "oistapp::OISTMakeDetectorHits_COMP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTMakeDetectorHits_Muon = {"_p_oistapp__OISTMakeDetectorHits_Muon", "oistapp::OISTMakeDetectorHits_Muon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTMakeDetectorHits_OISTCdTe = {"_p_oistapp__OISTMakeDetectorHits_OISTCdTe", "oistapp::OISTMakeDetectorHits_OISTCdTe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTPrimaryGen2DPhantom = {"_p_oistapp__OISTPrimaryGen2DPhantom", "oistapp::OISTPrimaryGen2DPhantom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTPrimaryGen3DPhantom = {"_p_oistapp__OISTPrimaryGen3DPhantom", "oistapp::OISTPrimaryGen3DPhantom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTPrimaryGenUltraMicroPhantom = {"_p_oistapp__OISTPrimaryGenUltraMicroPhantom", "oistapp::OISTPrimaryGenUltraMicroPhantom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTReadDataFile_COMP = {"_p_oistapp__OISTReadDataFile_COMP", "oistapp::OISTReadDataFile_COMP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTReadDataFile_Muon = {"_p_oistapp__OISTReadDataFile_Muon", "oistapp::OISTReadDataFile_Muon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTReadDataFile_Muon2 = {"_p_oistapp__OISTReadDataFile_Muon2", "oistapp::OISTReadDataFile_Muon2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTReadDataFile_NT = {"_p_oistapp__OISTReadDataFile_NT", "oistapp::OISTReadDataFile_NT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTReadHitTree = {"_p_oistapp__OISTReadHitTree", "oistapp::OISTReadHitTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTWriteComptonEventTree = {"_p_oistapp__OISTWriteComptonEventTree", "oistapp::OISTWriteComptonEventTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oistapp__OISTWriteHitTree = {"_p_oistapp__OISTWriteHitTree", "oistapp::OISTWriteHitTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t = {"_p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t", "anl::ModuleParamList *|std::list< ModuleParam,std::allocator< ModuleParam > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator = {"_p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator", "anl::ModuleParamIter *|std::list< ModuleParam,std::allocator< ModuleParam > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator = {"_p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator", "anl::ModuleParamConstIter *|std::list< std::shared_ptr< anl::VModuleParameter > >::const_iterator *|std::list< std::shared_ptr< anl::VModuleParameter >,std::allocator< std::shared_ptr< anl::VModuleParameter > > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_anl__VModuleParameter_t = {"_p_std__shared_ptrT_anl__VModuleParameter_t", "std::shared_ptr< anl::VModuleParameter > *|anl::ModuleParam_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_anl__BasicModule,
  &_swigt__p_anlgeant4__BasicPrimaryGen,
  &_swigt__p_anlgeant4__GaussianBeamPrimaryGen,
  &_swigt__p_anlgeant4__Geant4Body,
  &_swigt__p_anlgeant4__Geant4Simple,
  &_swigt__p_anlgeant4__IsotropicPrimaryGen,
  &_swigt__p_anlgeant4__NucleusPrimaryGen,
  &_swigt__p_anlgeant4__NucleusPrimaryGenInVolume,
  &_swigt__p_anlgeant4__PlaneWavePrimaryGen,
  &_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen,
  &_swigt__p_anlgeant4__PointSourcePrimaryGen,
  &_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume,
  &_swigt__p_anlgeant4__StandardPickUpData,
  &_swigt__p_anlgeant4__VANLGeometry,
  &_swigt__p_anlgeant4__VANLPhysicsList,
  &_swigt__p_anlgeant4__VANLPrimaryGen,
  &_swigt__p_anlgeant4__VPickUpData,
  &_swigt__p_char,
  &_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen,
  &_swigt__p_comptonsoft__ActivationPickUpData,
  &_swigt__p_comptonsoft__AnalyzeHits,
  &_swigt__p_comptonsoft__ApplyEPICompensation,
  &_swigt__p_comptonsoft__AssignG4CopyNumber,
  &_swigt__p_comptonsoft__BackProjection,
  &_swigt__p_comptonsoft__BackProjectionSky,
  &_swigt__p_comptonsoft__CSHitCollection,
  &_swigt__p_comptonsoft__CalculatePedestalLevels,
  &_swigt__p_comptonsoft__ComptonEventFilter,
  &_swigt__p_comptonsoft__ComptonModeFilter,
  &_swigt__p_comptonsoft__ConstructChannelMap,
  &_swigt__p_comptonsoft__ConstructDetector,
  &_swigt__p_comptonsoft__ConstructDetectorForSimulation,
  &_swigt__p_comptonsoft__CorrectPHA,
  &_swigt__p_comptonsoft__DumpMass,
  &_swigt__p_comptonsoft__EfficiencyMapSky,
  &_swigt__p_comptonsoft__EventReconstruction,
  &_swigt__p_comptonsoft__EventSelection,
  &_swigt__p_comptonsoft__HXIEventSelection,
  &_swigt__p_comptonsoft__HistogramARM,
  &_swigt__p_comptonsoft__HistogramARMByPositionMeasurement,
  &_swigt__p_comptonsoft__HistogramAzimuthAngle,
  &_swigt__p_comptonsoft__HistogramEnergy2D,
  &_swigt__p_comptonsoft__HistogramEnergySpectrum,
  &_swigt__p_comptonsoft__HistogramPHA,
  &_swigt__p_comptonsoft__InitialConditionFilter,
  &_swigt__p_comptonsoft__InitialParticleTree,
  &_swigt__p_comptonsoft__KillStepPickUpData,
  &_swigt__p_comptonsoft__MakeDetectorHits,
  &_swigt__p_comptonsoft__MakeDetectorHitsTR,
  &_swigt__p_comptonsoft__MakeRawHits,
  &_swigt__p_comptonsoft__MaterialSamplePickUpData,
  &_swigt__p_comptonsoft__PhysicsListManager,
  &_swigt__p_comptonsoft__QuickAnalysisForDSD,
  &_swigt__p_comptonsoft__RDPickUpData,
  &_swigt__p_comptonsoft__ReadComptonEventTree,
  &_swigt__p_comptonsoft__ReadDataFile,
  &_swigt__p_comptonsoft__ReadDataFile_NB0,
  &_swigt__p_comptonsoft__ReadDataFile_NT,
  &_swigt__p_comptonsoft__ReadDataFile_SpW2,
  &_swigt__p_comptonsoft__ReadDataFile_VME3,
  &_swigt__p_comptonsoft__ReadEventTree,
  &_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits,
  &_swigt__p_comptonsoft__ReadEventTreeAsRawHits,
  &_swigt__p_comptonsoft__ReadHitTree,
  &_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits,
  &_swigt__p_comptonsoft__ReadHitTreeAsRawHits,
  &_swigt__p_comptonsoft__RecalculateEPI,
  &_swigt__p_comptonsoft__RecalculateSimulationNoise,
  &_swigt__p_comptonsoft__ResponseMatrix,
  &_swigt__p_comptonsoft__SaveData,
  &_swigt__p_comptonsoft__ScatteringPickUpData,
  &_swigt__p_comptonsoft__SelectFullDeposit,
  &_swigt__p_comptonsoft__SelectHits,
  &_swigt__p_comptonsoft__SelectTime,
  &_swigt__p_comptonsoft__SetBadChannels,
  &_swigt__p_comptonsoft__SetChannelsInfo,
  &_swigt__p_comptonsoft__SetNoiseLevels,
  &_swigt__p_comptonsoft__VCSModule,
  &_swigt__p_comptonsoft__WriteComptonEventTree,
  &_swigt__p_comptonsoft__WriteEventTree,
  &_swigt__p_comptonsoft__WriteHitTree,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_oistapp__OIST1DHistogram,
  &_swigt__p_oistapp__OISTComptonEventTreeIO,
  &_swigt__p_oistapp__OISTComptonEventTreeIOWithInitialInfo,
  &_swigt__p_oistapp__OISTDetectorImage,
  &_swigt__p_oistapp__OISTDetectorImage_OISTCdTe,
  &_swigt__p_oistapp__OISTHitTreeIO,
  &_swigt__p_oistapp__OISTHitTreeIOWithInitialInfo,
  &_swigt__p_oistapp__OISTMakeDetectorHits,
  &_swigt__p_oistapp__OISTMakeDetectorHits_COMP,
  &_swigt__p_oistapp__OISTMakeDetectorHits_Muon,
  &_swigt__p_oistapp__OISTMakeDetectorHits_OISTCdTe,
  &_swigt__p_oistapp__OISTPrimaryGen2DPhantom,
  &_swigt__p_oistapp__OISTPrimaryGen3DPhantom,
  &_swigt__p_oistapp__OISTPrimaryGenUltraMicroPhantom,
  &_swigt__p_oistapp__OISTReadDataFile_COMP,
  &_swigt__p_oistapp__OISTReadDataFile_Muon,
  &_swigt__p_oistapp__OISTReadDataFile_Muon2,
  &_swigt__p_oistapp__OISTReadDataFile_NT,
  &_swigt__p_oistapp__OISTReadHitTree,
  &_swigt__p_oistapp__OISTWriteComptonEventTree,
  &_swigt__p_oistapp__OISTWriteHitTree,
  &_swigt__p_reference,
  &_swigt__p_size_type,
  &_swigt__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t,
  &_swigt__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator,
  &_swigt__p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator,
  &_swigt__p_std__shared_ptrT_anl__VModuleParameter_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__InitialParticleTree[] = {{&_swigt__p_comptonsoft__InitialParticleTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadComptonEventTree[] = {{&_swigt__p_comptonsoft__ReadComptonEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteComptonEventTree[] = {{&_swigt__p_comptonsoft__WriteComptonEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadEventTree[] = {{&_swigt__p_comptonsoft__ReadEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteEventTree[] = {{&_swigt__p_comptonsoft__WriteEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_NT[] = {{&_swigt__p_comptonsoft__ReadDataFile_NT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructDetector[] = {{&_swigt__p_comptonsoft__ConstructDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__Geant4Body[] = {{&_swigt__p_anlgeant4__Geant4Body, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CorrectPHA[] = {{&_swigt__p_comptonsoft__CorrectPHA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__BackProjectionSky[] = {{&_swigt__p_comptonsoft__BackProjectionSky, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramPHA[] = {{&_swigt__p_comptonsoft__HistogramPHA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_NB0[] = {{&_swigt__p_comptonsoft__ReadDataFile_NB0, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PointSourcePrimaryGen[] = {{&_swigt__p_anlgeant4__PointSourcePrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AHRadiationBackgroundPrimaryGen[] = {{&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__NucleusPrimaryGen[] = {{&_swigt__p_anlgeant4__NucleusPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__IsotropicPrimaryGen[] = {{&_swigt__p_anlgeant4__IsotropicPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__GaussianBeamPrimaryGen[] = {{&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PlaneWaveRectanglePrimaryGen[] = {{&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PlaneWavePrimaryGen[] = {{&_swigt__p_anlgeant4__PlaneWavePrimaryGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AssignG4CopyNumber[] = {{&_swigt__p_comptonsoft__AssignG4CopyNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ComptonModeFilter[] = {{&_swigt__p_comptonsoft__ComptonModeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructDetectorForSimulation[] = {{&_swigt__p_comptonsoft__ConstructDetectorForSimulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CalculatePedestalLevels[] = {{&_swigt__p_comptonsoft__CalculatePedestalLevels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramEnergy2D[] = {{&_swigt__p_comptonsoft__HistogramEnergy2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__AnalyzeHits[] = {{&_swigt__p_comptonsoft__AnalyzeHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadEventTreeAsDetectorHits[] = {{&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadHitTreeAsDetectorHits[] = {{&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MakeDetectorHits[] = {{&_swigt__p_comptonsoft__MakeDetectorHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ApplyEPICompensation[] = {{&_swigt__p_comptonsoft__ApplyEPICompensation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectFullDeposit[] = {{&_swigt__p_comptonsoft__SelectFullDeposit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadHitTree[] = {{&_swigt__p_comptonsoft__ReadHitTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__WriteHitTree[] = {{&_swigt__p_comptonsoft__WriteHitTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_SpW2[] = {{&_swigt__p_comptonsoft__ReadDataFile_SpW2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RecalculateEPI[] = {{&_swigt__p_comptonsoft__RecalculateEPI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectTime[] = {{&_swigt__p_comptonsoft__SelectTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetBadChannels[] = {{&_swigt__p_comptonsoft__SetBadChannels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__QuickAnalysisForDSD[] = {{&_swigt__p_comptonsoft__QuickAnalysisForDSD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ComptonEventFilter[] = {{&_swigt__p_comptonsoft__ComptonEventFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__InitialConditionFilter[] = {{&_swigt__p_comptonsoft__InitialConditionFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__Geant4Simple[] = {{&_swigt__p_anlgeant4__Geant4Simple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__BackProjection[] = {{&_swigt__p_comptonsoft__BackProjection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__CSHitCollection[] = {{&_swigt__p_comptonsoft__CSHitCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__EventSelection[] = {{&_swigt__p_comptonsoft__EventSelection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HXIEventSelection[] = {{&_swigt__p_comptonsoft__HXIEventSelection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__NucleusPrimaryGenInVolume[] = {{&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__PrimaryGenUniformSourceInVolume[] = {{&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SaveData[] = {{&_swigt__p_comptonsoft__SaveData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramEnergySpectrum[] = {{&_swigt__p_comptonsoft__HistogramEnergySpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramAzimuthAngle[] = {{&_swigt__p_comptonsoft__HistogramAzimuthAngle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VANLGeometry[] = {{&_swigt__p_anlgeant4__VANLGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetChannelsInfo[] = {{&_swigt__p_comptonsoft__SetChannelsInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__EfficiencyMapSky[] = {{&_swigt__p_comptonsoft__EfficiencyMapSky, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__PhysicsListManager[] = {{&_swigt__p_comptonsoft__PhysicsListManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VANLPhysicsList[] = {{&_swigt__p_anlgeant4__VANLPhysicsList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ConstructChannelMap[] = {{&_swigt__p_comptonsoft__ConstructChannelMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MakeRawHits[] = {{&_swigt__p_comptonsoft__MakeRawHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadEventTreeAsRawHits[] = {{&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadHitTreeAsRawHits[] = {{&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MakeDetectorHitsTR[] = {{&_swigt__p_comptonsoft__MakeDetectorHitsTR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ResponseMatrix[] = {{&_swigt__p_comptonsoft__ResponseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramARMByPositionMeasurement[] = {{&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile_VME3[] = {{&_swigt__p_comptonsoft__ReadDataFile_VME3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__MaterialSamplePickUpData[] = {{&_swigt__p_comptonsoft__MaterialSamplePickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__KillStepPickUpData[] = {{&_swigt__p_comptonsoft__KillStepPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ActivationPickUpData[] = {{&_swigt__p_comptonsoft__ActivationPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RDPickUpData[] = {{&_swigt__p_comptonsoft__RDPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VPickUpData[] = {{&_swigt__p_anlgeant4__VPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__StandardPickUpData[] = {{&_swigt__p_anlgeant4__StandardPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ScatteringPickUpData[] = {{&_swigt__p_comptonsoft__ScatteringPickUpData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SetNoiseLevels[] = {{&_swigt__p_comptonsoft__SetNoiseLevels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__EventReconstruction[] = {{&_swigt__p_comptonsoft__EventReconstruction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__RecalculateSimulationNoise[] = {{&_swigt__p_comptonsoft__RecalculateSimulationNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__HistogramARM[] = {{&_swigt__p_comptonsoft__HistogramARM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__DumpMass[] = {{&_swigt__p_comptonsoft__DumpMass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anl__BasicModule[] = {  {&_swigt__p_comptonsoft__InitialParticleTree, _p_comptonsoft__InitialParticleTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadComptonEventTree, _p_comptonsoft__ReadComptonEventTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteComptonEventTree, _p_comptonsoft__WriteComptonEventTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTree, _p_comptonsoft__ReadEventTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteEventTree, _p_comptonsoft__WriteEventTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTWriteComptonEventTree, _p_oistapp__OISTWriteComptonEventTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_Muon, _p_oistapp__OISTReadDataFile_MuonTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NT, _p_comptonsoft__ReadDataFile_NTTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_NT, _p_oistapp__OISTReadDataFile_NTTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_Muon, _p_oistapp__OISTMakeDetectorHits_MuonTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructDetector, _p_comptonsoft__ConstructDetectorTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__Geant4Body, _p_anlgeant4__Geant4BodyTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectHits, _p_comptonsoft__SelectHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGen2DPhantom, _p_oistapp__OISTPrimaryGen2DPhantomTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGen3DPhantom, _p_oistapp__OISTPrimaryGen3DPhantomTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGenUltraMicroPhantom, _p_oistapp__OISTPrimaryGenUltraMicroPhantomTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CorrectPHA, _p_comptonsoft__CorrectPHATo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjectionSky, _p_comptonsoft__BackProjectionSkyTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramPHA, _p_comptonsoft__HistogramPHATo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NB0, _p_comptonsoft__ReadDataFile_NB0To_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VANLPrimaryGen, _p_anlgeant4__VANLPrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__BasicPrimaryGen, _p_anlgeant4__BasicPrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PointSourcePrimaryGen, _p_anlgeant4__PointSourcePrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGen, _p_anlgeant4__NucleusPrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, _p_anlgeant4__IsotropicPrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, _p_anlgeant4__GaussianBeamPrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, _p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PlaneWavePrimaryGen, _p_anlgeant4__PlaneWavePrimaryGenTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AssignG4CopyNumber, _p_comptonsoft__AssignG4CopyNumberTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ComptonModeFilter, _p_comptonsoft__ComptonModeFilterTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructDetectorForSimulation, _p_comptonsoft__ConstructDetectorForSimulationTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CalculatePedestalLevels, _p_comptonsoft__CalculatePedestalLevelsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergy2D, _p_comptonsoft__HistogramEnergy2DTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeHits, _p_comptonsoft__AnalyzeHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, _p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, _p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHits, _p_comptonsoft__MakeDetectorHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits, _p_oistapp__OISTMakeDetectorHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ApplyEPICompensation, _p_comptonsoft__ApplyEPICompensationTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectFullDeposit, _p_comptonsoft__SelectFullDepositTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTree, _p_comptonsoft__ReadHitTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__WriteHitTree, _p_comptonsoft__WriteHitTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTWriteHitTree, _p_oistapp__OISTWriteHitTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTReadHitTree, _p_oistapp__OISTReadHitTreeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, _p_comptonsoft__ReadDataFile_SpW2To_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateEPI, _p_comptonsoft__RecalculateEPITo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_COMP, _p_oistapp__OISTReadDataFile_COMPTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SelectTime, _p_comptonsoft__SelectTimeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetBadChannels, _p_comptonsoft__SetBadChannelsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_COMP, _p_oistapp__OISTMakeDetectorHits_COMPTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__QuickAnalysisForDSD, _p_comptonsoft__QuickAnalysisForDSDTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ComptonEventFilter, _p_comptonsoft__ComptonEventFilterTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__InitialConditionFilter, _p_comptonsoft__InitialConditionFilterTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__Geant4Simple, _p_anlgeant4__Geant4SimpleTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjection, _p_comptonsoft__BackProjectionTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__CSHitCollection, _p_comptonsoft__CSHitCollectionTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__EventSelection, _p_comptonsoft__EventSelectionTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HXIEventSelection, _p_comptonsoft__HXIEventSelectionTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTDetectorImage_OISTCdTe, _p_oistapp__OISTDetectorImage_OISTCdTeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_OISTCdTe, _p_oistapp__OISTMakeDetectorHits_OISTCdTeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, _p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, _p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SaveData, _p_comptonsoft__SaveDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergySpectrum, _p_comptonsoft__HistogramEnergySpectrumTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramAzimuthAngle, _p_comptonsoft__HistogramAzimuthAngleTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VANLGeometry, _p_anlgeant4__VANLGeometryTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetChannelsInfo, _p_comptonsoft__SetChannelsInfoTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__EfficiencyMapSky, _p_comptonsoft__EfficiencyMapSkyTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OIST1DHistogram, _p_oistapp__OIST1DHistogramTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__PhysicsListManager, _p_comptonsoft__PhysicsListManagerTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VANLPhysicsList, _p_anlgeant4__VANLPhysicsListTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ConstructChannelMap, _p_comptonsoft__ConstructChannelMapTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anl__BasicModule, 0, 0, 0},  {&_swigt__p_comptonsoft__VCSModule, _p_comptonsoft__VCSModuleTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTDetectorImage, _p_oistapp__OISTDetectorImageTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MakeRawHits, _p_comptonsoft__MakeRawHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, _p_comptonsoft__ReadEventTreeAsRawHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, _p_comptonsoft__ReadHitTreeAsRawHitsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsTR, _p_comptonsoft__MakeDetectorHitsTRTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ResponseMatrix, _p_comptonsoft__ResponseMatrixTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, _p_comptonsoft__HistogramARMByPositionMeasurementTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_VME3, _p_comptonsoft__ReadDataFile_VME3To_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__MaterialSamplePickUpData, _p_comptonsoft__MaterialSamplePickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__KillStepPickUpData, _p_comptonsoft__KillStepPickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ActivationPickUpData, _p_comptonsoft__ActivationPickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RDPickUpData, _p_comptonsoft__RDPickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__VPickUpData, _p_anlgeant4__VPickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_anlgeant4__StandardPickUpData, _p_anlgeant4__StandardPickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ScatteringPickUpData, _p_comptonsoft__ScatteringPickUpDataTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__SetNoiseLevels, _p_comptonsoft__SetNoiseLevelsTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__EventReconstruction, _p_comptonsoft__EventReconstructionTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateSimulationNoise, _p_comptonsoft__RecalculateSimulationNoiseTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_Muon2, _p_oistapp__OISTReadDataFile_Muon2To_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile, _p_comptonsoft__ReadDataFileTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARM, _p_comptonsoft__HistogramARMTo_p_anl__BasicModule, 0, 0},  {&_swigt__p_comptonsoft__DumpMass, _p_comptonsoft__DumpMassTo_p_anl__BasicModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__BasicPrimaryGen[] = {  {&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, _p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, _p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__BasicPrimaryGen, 0, 0, 0},  {&_swigt__p_anlgeant4__PointSourcePrimaryGen, _p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWavePrimaryGen, _p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, _p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, _p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, _p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGen, _p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGen2DPhantom, _p_oistapp__OISTPrimaryGen2DPhantomTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGen3DPhantom, _p_oistapp__OISTPrimaryGen3DPhantomTo_p_anlgeant4__BasicPrimaryGen, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGenUltraMicroPhantom, _p_oistapp__OISTPrimaryGenUltraMicroPhantomTo_p_anlgeant4__BasicPrimaryGen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_anlgeant4__VANLPrimaryGen[] = {  {&_swigt__p_anlgeant4__BasicPrimaryGen, _p_anlgeant4__BasicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PointSourcePrimaryGen, _p_anlgeant4__PointSourcePrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWavePrimaryGen, _p_anlgeant4__PlaneWavePrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PlaneWaveRectanglePrimaryGen, _p_anlgeant4__PlaneWaveRectanglePrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__GaussianBeamPrimaryGen, _p_anlgeant4__GaussianBeamPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__IsotropicPrimaryGen, _p_anlgeant4__IsotropicPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGen, _p_anlgeant4__NucleusPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_comptonsoft__AHRadiationBackgroundPrimaryGen, _p_comptonsoft__AHRadiationBackgroundPrimaryGenTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__VANLPrimaryGen, 0, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGenUltraMicroPhantom, _p_oistapp__OISTPrimaryGenUltraMicroPhantomTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGen3DPhantom, _p_oistapp__OISTPrimaryGen3DPhantomTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_oistapp__OISTPrimaryGen2DPhantom, _p_oistapp__OISTPrimaryGen2DPhantomTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__NucleusPrimaryGenInVolume, _p_anlgeant4__NucleusPrimaryGenInVolumeTo_p_anlgeant4__VANLPrimaryGen, 0, 0},  {&_swigt__p_anlgeant4__PrimaryGenUniformSourceInVolume, _p_anlgeant4__PrimaryGenUniformSourceInVolumeTo_p_anlgeant4__VANLPrimaryGen, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__ReadDataFile[] = {  {&_swigt__p_oistapp__OISTReadDataFile_Muon2, _p_oistapp__OISTReadDataFile_Muon2To_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile, 0, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_Muon, _p_oistapp__OISTReadDataFile_MuonTo_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_COMP, _p_oistapp__OISTReadDataFile_COMPTo_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, _p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NT, _p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NB0, _p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_NT, _p_oistapp__OISTReadDataFile_NTTo_p_comptonsoft__ReadDataFile, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_VME3, _p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__ReadDataFile, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__SelectHits[] = {  {&_swigt__p_comptonsoft__SelectHits, 0, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeHits, _p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_OISTCdTe, _p_oistapp__OISTMakeDetectorHits_OISTCdTeTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_comptonsoft__MakeRawHits, _p_comptonsoft__MakeRawHitsTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsTR, _p_comptonsoft__MakeDetectorHitsTRTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_Muon, _p_oistapp__OISTMakeDetectorHits_MuonTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_COMP, _p_oistapp__OISTMakeDetectorHits_COMPTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHits, _p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__SelectHits, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits, _p_oistapp__OISTMakeDetectorHitsTo_p_comptonsoft__SelectHits, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_comptonsoft__VCSModule[] = {  {&_swigt__p_comptonsoft__ConstructChannelMap, _p_comptonsoft__ConstructChannelMapTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ResponseMatrix, _p_comptonsoft__ResponseMatrixTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARMByPositionMeasurement, _p_comptonsoft__HistogramARMByPositionMeasurementTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetBadChannels, _p_comptonsoft__SetBadChannelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramPHA, _p_comptonsoft__HistogramPHATo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTDetectorImage_OISTCdTe, _p_oistapp__OISTDetectorImage_OISTCdTeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_OISTCdTe, _p_oistapp__OISTMakeDetectorHits_OISTCdTeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_COMP, _p_oistapp__OISTMakeDetectorHits_COMPTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsRawHits, _p_comptonsoft__ReadEventTreeAsRawHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsRawHits, _p_comptonsoft__ReadHitTreeAsRawHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__MakeRawHits, _p_comptonsoft__MakeRawHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ApplyEPICompensation, _p_comptonsoft__ApplyEPICompensationTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ComptonModeFilter, _p_comptonsoft__ComptonModeFilterTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits_Muon, _p_oistapp__OISTMakeDetectorHits_MuonTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NT, _p_comptonsoft__ReadDataFile_NTTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_NT, _p_oistapp__OISTReadDataFile_NTTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTreeAsDetectorHits, _p_comptonsoft__ReadEventTreeAsDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTreeAsDetectorHits, _p_comptonsoft__ReadHitTreeAsDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHits, _p_comptonsoft__MakeDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTMakeDetectorHits, _p_oistapp__OISTMakeDetectorHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SelectHits, _p_comptonsoft__SelectHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateSimulationNoise, _p_comptonsoft__RecalculateSimulationNoiseTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_VME3, _p_comptonsoft__ReadDataFile_VME3To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__AnalyzeHits, _p_comptonsoft__AnalyzeHitsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__EventSelection, _p_comptonsoft__EventSelectionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HXIEventSelection, _p_comptonsoft__HXIEventSelectionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjection, _p_comptonsoft__BackProjectionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__EfficiencyMapSky, _p_comptonsoft__EfficiencyMapSkyTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_Muon2, _p_oistapp__OISTReadDataFile_Muon2To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteComptonEventTree, _p_comptonsoft__WriteComptonEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadEventTree, _p_comptonsoft__ReadEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteEventTree, _p_comptonsoft__WriteEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadComptonEventTree, _p_comptonsoft__ReadComptonEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTWriteComptonEventTree, _p_oistapp__OISTWriteComptonEventTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__BackProjectionSky, _p_comptonsoft__BackProjectionSkyTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__CorrectPHA, _p_comptonsoft__CorrectPHATo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_COMP, _p_oistapp__OISTReadDataFile_COMPTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergy2D, _p_comptonsoft__HistogramEnergy2DTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramEnergySpectrum, _p_comptonsoft__HistogramEnergySpectrumTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_SpW2, _p_comptonsoft__ReadDataFile_SpW2To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTReadDataFile_Muon, _p_oistapp__OISTReadDataFile_MuonTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__MakeDetectorHitsTR, _p_comptonsoft__MakeDetectorHitsTRTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__VCSModule, 0, 0, 0},  {&_swigt__p_comptonsoft__CalculatePedestalLevels, _p_comptonsoft__CalculatePedestalLevelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile_NB0, _p_comptonsoft__ReadDataFile_NB0To_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramAzimuthAngle, _p_comptonsoft__HistogramAzimuthAngleTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OIST1DHistogram, _p_oistapp__OIST1DHistogramTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__RecalculateEPI, _p_comptonsoft__RecalculateEPITo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__InitialParticleTree, _p_comptonsoft__InitialParticleTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadDataFile, _p_comptonsoft__ReadDataFileTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__HistogramARM, _p_comptonsoft__HistogramARMTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__ReadHitTree, _p_comptonsoft__ReadHitTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__WriteHitTree, _p_comptonsoft__WriteHitTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTDetectorImage, _p_oistapp__OISTDetectorImageTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTWriteHitTree, _p_oistapp__OISTWriteHitTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_oistapp__OISTReadHitTree, _p_oistapp__OISTReadHitTreeTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__EventReconstruction, _p_comptonsoft__EventReconstructionTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetChannelsInfo, _p_comptonsoft__SetChannelsInfoTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__SetNoiseLevels, _p_comptonsoft__SetNoiseLevelsTo_p_comptonsoft__VCSModule, 0, 0},  {&_swigt__p_comptonsoft__QuickAnalysisForDSD, _p_comptonsoft__QuickAnalysisForDSDTo_p_comptonsoft__VCSModule, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OIST1DHistogram[] = {  {&_swigt__p_oistapp__OIST1DHistogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTComptonEventTreeIO[] = {  {&_swigt__p_oistapp__OISTComptonEventTreeIOWithInitialInfo, _p_oistapp__OISTComptonEventTreeIOWithInitialInfoTo_p_oistapp__OISTComptonEventTreeIO, 0, 0},  {&_swigt__p_oistapp__OISTComptonEventTreeIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTComptonEventTreeIOWithInitialInfo[] = {  {&_swigt__p_oistapp__OISTComptonEventTreeIOWithInitialInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTDetectorImage[] = {  {&_swigt__p_oistapp__OISTDetectorImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTDetectorImage_OISTCdTe[] = {  {&_swigt__p_oistapp__OISTDetectorImage_OISTCdTe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTHitTreeIO[] = {  {&_swigt__p_oistapp__OISTHitTreeIOWithInitialInfo, _p_oistapp__OISTHitTreeIOWithInitialInfoTo_p_oistapp__OISTHitTreeIO, 0, 0},  {&_swigt__p_oistapp__OISTHitTreeIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTHitTreeIOWithInitialInfo[] = {  {&_swigt__p_oistapp__OISTHitTreeIOWithInitialInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTMakeDetectorHits[] = {  {&_swigt__p_oistapp__OISTMakeDetectorHits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTMakeDetectorHits_COMP[] = {  {&_swigt__p_oistapp__OISTMakeDetectorHits_COMP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTMakeDetectorHits_Muon[] = {  {&_swigt__p_oistapp__OISTMakeDetectorHits_Muon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTMakeDetectorHits_OISTCdTe[] = {  {&_swigt__p_oistapp__OISTMakeDetectorHits_OISTCdTe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTPrimaryGen2DPhantom[] = {  {&_swigt__p_oistapp__OISTPrimaryGen2DPhantom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTPrimaryGen3DPhantom[] = {  {&_swigt__p_oistapp__OISTPrimaryGen3DPhantom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTPrimaryGenUltraMicroPhantom[] = {  {&_swigt__p_oistapp__OISTPrimaryGenUltraMicroPhantom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTReadDataFile_COMP[] = {  {&_swigt__p_oistapp__OISTReadDataFile_COMP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTReadDataFile_Muon[] = {  {&_swigt__p_oistapp__OISTReadDataFile_Muon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTReadDataFile_Muon2[] = {  {&_swigt__p_oistapp__OISTReadDataFile_Muon2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTReadDataFile_NT[] = {  {&_swigt__p_oistapp__OISTReadDataFile_NT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTReadHitTree[] = {  {&_swigt__p_oistapp__OISTReadHitTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTWriteComptonEventTree[] = {  {&_swigt__p_oistapp__OISTWriteComptonEventTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oistapp__OISTWriteHitTree[] = {  {&_swigt__p_oistapp__OISTWriteHitTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t[] = {  {&_swigt__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator[] = {  {&_swigt__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator[] = {  {&_swigt__p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_anl__VModuleParameter_t[] = {  {&_swigt__p_std__shared_ptrT_anl__VModuleParameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_anl__BasicModule,
  _swigc__p_anlgeant4__BasicPrimaryGen,
  _swigc__p_anlgeant4__GaussianBeamPrimaryGen,
  _swigc__p_anlgeant4__Geant4Body,
  _swigc__p_anlgeant4__Geant4Simple,
  _swigc__p_anlgeant4__IsotropicPrimaryGen,
  _swigc__p_anlgeant4__NucleusPrimaryGen,
  _swigc__p_anlgeant4__NucleusPrimaryGenInVolume,
  _swigc__p_anlgeant4__PlaneWavePrimaryGen,
  _swigc__p_anlgeant4__PlaneWaveRectanglePrimaryGen,
  _swigc__p_anlgeant4__PointSourcePrimaryGen,
  _swigc__p_anlgeant4__PrimaryGenUniformSourceInVolume,
  _swigc__p_anlgeant4__StandardPickUpData,
  _swigc__p_anlgeant4__VANLGeometry,
  _swigc__p_anlgeant4__VANLPhysicsList,
  _swigc__p_anlgeant4__VANLPrimaryGen,
  _swigc__p_anlgeant4__VPickUpData,
  _swigc__p_char,
  _swigc__p_comptonsoft__AHRadiationBackgroundPrimaryGen,
  _swigc__p_comptonsoft__ActivationPickUpData,
  _swigc__p_comptonsoft__AnalyzeHits,
  _swigc__p_comptonsoft__ApplyEPICompensation,
  _swigc__p_comptonsoft__AssignG4CopyNumber,
  _swigc__p_comptonsoft__BackProjection,
  _swigc__p_comptonsoft__BackProjectionSky,
  _swigc__p_comptonsoft__CSHitCollection,
  _swigc__p_comptonsoft__CalculatePedestalLevels,
  _swigc__p_comptonsoft__ComptonEventFilter,
  _swigc__p_comptonsoft__ComptonModeFilter,
  _swigc__p_comptonsoft__ConstructChannelMap,
  _swigc__p_comptonsoft__ConstructDetector,
  _swigc__p_comptonsoft__ConstructDetectorForSimulation,
  _swigc__p_comptonsoft__CorrectPHA,
  _swigc__p_comptonsoft__DumpMass,
  _swigc__p_comptonsoft__EfficiencyMapSky,
  _swigc__p_comptonsoft__EventReconstruction,
  _swigc__p_comptonsoft__EventSelection,
  _swigc__p_comptonsoft__HXIEventSelection,
  _swigc__p_comptonsoft__HistogramARM,
  _swigc__p_comptonsoft__HistogramARMByPositionMeasurement,
  _swigc__p_comptonsoft__HistogramAzimuthAngle,
  _swigc__p_comptonsoft__HistogramEnergy2D,
  _swigc__p_comptonsoft__HistogramEnergySpectrum,
  _swigc__p_comptonsoft__HistogramPHA,
  _swigc__p_comptonsoft__InitialConditionFilter,
  _swigc__p_comptonsoft__InitialParticleTree,
  _swigc__p_comptonsoft__KillStepPickUpData,
  _swigc__p_comptonsoft__MakeDetectorHits,
  _swigc__p_comptonsoft__MakeDetectorHitsTR,
  _swigc__p_comptonsoft__MakeRawHits,
  _swigc__p_comptonsoft__MaterialSamplePickUpData,
  _swigc__p_comptonsoft__PhysicsListManager,
  _swigc__p_comptonsoft__QuickAnalysisForDSD,
  _swigc__p_comptonsoft__RDPickUpData,
  _swigc__p_comptonsoft__ReadComptonEventTree,
  _swigc__p_comptonsoft__ReadDataFile,
  _swigc__p_comptonsoft__ReadDataFile_NB0,
  _swigc__p_comptonsoft__ReadDataFile_NT,
  _swigc__p_comptonsoft__ReadDataFile_SpW2,
  _swigc__p_comptonsoft__ReadDataFile_VME3,
  _swigc__p_comptonsoft__ReadEventTree,
  _swigc__p_comptonsoft__ReadEventTreeAsDetectorHits,
  _swigc__p_comptonsoft__ReadEventTreeAsRawHits,
  _swigc__p_comptonsoft__ReadHitTree,
  _swigc__p_comptonsoft__ReadHitTreeAsDetectorHits,
  _swigc__p_comptonsoft__ReadHitTreeAsRawHits,
  _swigc__p_comptonsoft__RecalculateEPI,
  _swigc__p_comptonsoft__RecalculateSimulationNoise,
  _swigc__p_comptonsoft__ResponseMatrix,
  _swigc__p_comptonsoft__SaveData,
  _swigc__p_comptonsoft__ScatteringPickUpData,
  _swigc__p_comptonsoft__SelectFullDeposit,
  _swigc__p_comptonsoft__SelectHits,
  _swigc__p_comptonsoft__SelectTime,
  _swigc__p_comptonsoft__SetBadChannels,
  _swigc__p_comptonsoft__SetChannelsInfo,
  _swigc__p_comptonsoft__SetNoiseLevels,
  _swigc__p_comptonsoft__VCSModule,
  _swigc__p_comptonsoft__WriteComptonEventTree,
  _swigc__p_comptonsoft__WriteEventTree,
  _swigc__p_comptonsoft__WriteHitTree,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_oistapp__OIST1DHistogram,
  _swigc__p_oistapp__OISTComptonEventTreeIO,
  _swigc__p_oistapp__OISTComptonEventTreeIOWithInitialInfo,
  _swigc__p_oistapp__OISTDetectorImage,
  _swigc__p_oistapp__OISTDetectorImage_OISTCdTe,
  _swigc__p_oistapp__OISTHitTreeIO,
  _swigc__p_oistapp__OISTHitTreeIOWithInitialInfo,
  _swigc__p_oistapp__OISTMakeDetectorHits,
  _swigc__p_oistapp__OISTMakeDetectorHits_COMP,
  _swigc__p_oistapp__OISTMakeDetectorHits_Muon,
  _swigc__p_oistapp__OISTMakeDetectorHits_OISTCdTe,
  _swigc__p_oistapp__OISTPrimaryGen2DPhantom,
  _swigc__p_oistapp__OISTPrimaryGen3DPhantom,
  _swigc__p_oistapp__OISTPrimaryGenUltraMicroPhantom,
  _swigc__p_oistapp__OISTReadDataFile_COMP,
  _swigc__p_oistapp__OISTReadDataFile_Muon,
  _swigc__p_oistapp__OISTReadDataFile_Muon2,
  _swigc__p_oistapp__OISTReadDataFile_NT,
  _swigc__p_oistapp__OISTReadHitTree,
  _swigc__p_oistapp__OISTWriteComptonEventTree,
  _swigc__p_oistapp__OISTWriteHitTree,
  _swigc__p_reference,
  _swigc__p_size_type,
  _swigc__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t,
  _swigc__p_std__listT_ModuleParam_std__allocatorT_ModuleParam_t_t__iterator,
  _swigc__p_std__listT_std__shared_ptrT_anl__VModuleParameter_t_std__allocatorT_std__shared_ptrT_anl__VModuleParameter_t_t_t__const_iterator,
  _swigc__p_std__shared_ptrT_anl__VModuleParameter_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_oISTapp(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mOISTapp = rb_define_module("OISTapp");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_require("ANL");
  rb_require("anlGeant4");
  rb_require("comptonSoft");
  
  SwigClassOISTPrimaryGen2DPhantom.klass = rb_define_class_under(mOISTapp, "OISTPrimaryGen2DPhantom", ((swig_class *) SWIGTYPE_p_anlgeant4__BasicPrimaryGen->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTPrimaryGen2DPhantom, (void *) &SwigClassOISTPrimaryGen2DPhantom);
  rb_define_alloc_func(SwigClassOISTPrimaryGen2DPhantom.klass, _wrap_OISTPrimaryGen2DPhantom_allocate);
  rb_define_method(SwigClassOISTPrimaryGen2DPhantom.klass, "initialize", VALUEFUNC(_wrap_new_OISTPrimaryGen2DPhantom), -1);
  SwigClassOISTPrimaryGen2DPhantom.mark = 0;
  SwigClassOISTPrimaryGen2DPhantom.destroy = (void (*)(void *)) free_oistapp_OISTPrimaryGen2DPhantom;
  SwigClassOISTPrimaryGen2DPhantom.trackObjects = 0;
  
  SwigClassOISTPrimaryGen3DPhantom.klass = rb_define_class_under(mOISTapp, "OISTPrimaryGen3DPhantom", ((swig_class *) SWIGTYPE_p_anlgeant4__BasicPrimaryGen->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTPrimaryGen3DPhantom, (void *) &SwigClassOISTPrimaryGen3DPhantom);
  rb_define_alloc_func(SwigClassOISTPrimaryGen3DPhantom.klass, _wrap_OISTPrimaryGen3DPhantom_allocate);
  rb_define_method(SwigClassOISTPrimaryGen3DPhantom.klass, "initialize", VALUEFUNC(_wrap_new_OISTPrimaryGen3DPhantom), -1);
  SwigClassOISTPrimaryGen3DPhantom.mark = 0;
  SwigClassOISTPrimaryGen3DPhantom.destroy = (void (*)(void *)) free_oistapp_OISTPrimaryGen3DPhantom;
  SwigClassOISTPrimaryGen3DPhantom.trackObjects = 0;
  
  SwigClassOISTPrimaryGenUltraMicroPhantom.klass = rb_define_class_under(mOISTapp, "OISTPrimaryGenUltraMicroPhantom", ((swig_class *) SWIGTYPE_p_anlgeant4__BasicPrimaryGen->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTPrimaryGenUltraMicroPhantom, (void *) &SwigClassOISTPrimaryGenUltraMicroPhantom);
  rb_define_alloc_func(SwigClassOISTPrimaryGenUltraMicroPhantom.klass, _wrap_OISTPrimaryGenUltraMicroPhantom_allocate);
  rb_define_method(SwigClassOISTPrimaryGenUltraMicroPhantom.klass, "initialize", VALUEFUNC(_wrap_new_OISTPrimaryGenUltraMicroPhantom), -1);
  SwigClassOISTPrimaryGenUltraMicroPhantom.mark = 0;
  SwigClassOISTPrimaryGenUltraMicroPhantom.destroy = (void (*)(void *)) free_oistapp_OISTPrimaryGenUltraMicroPhantom;
  SwigClassOISTPrimaryGenUltraMicroPhantom.trackObjects = 0;
  
  SwigClassOISTDetectorImage.klass = rb_define_class_under(mOISTapp, "OISTDetectorImage", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTDetectorImage, (void *) &SwigClassOISTDetectorImage);
  rb_define_alloc_func(SwigClassOISTDetectorImage.klass, _wrap_OISTDetectorImage_allocate);
  rb_define_method(SwigClassOISTDetectorImage.klass, "initialize", VALUEFUNC(_wrap_new_OISTDetectorImage), -1);
  SwigClassOISTDetectorImage.mark = 0;
  SwigClassOISTDetectorImage.destroy = (void (*)(void *)) free_oistapp_OISTDetectorImage;
  SwigClassOISTDetectorImage.trackObjects = 0;
  
  SwigClassOISTDetectorImage_OISTCdTe.klass = rb_define_class_under(mOISTapp, "OISTDetectorImage_OISTCdTe", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTDetectorImage_OISTCdTe, (void *) &SwigClassOISTDetectorImage_OISTCdTe);
  rb_define_alloc_func(SwigClassOISTDetectorImage_OISTCdTe.klass, _wrap_OISTDetectorImage_OISTCdTe_allocate);
  rb_define_method(SwigClassOISTDetectorImage_OISTCdTe.klass, "initialize", VALUEFUNC(_wrap_new_OISTDetectorImage_OISTCdTe), -1);
  SwigClassOISTDetectorImage_OISTCdTe.mark = 0;
  SwigClassOISTDetectorImage_OISTCdTe.destroy = (void (*)(void *)) free_oistapp_OISTDetectorImage_OISTCdTe;
  SwigClassOISTDetectorImage_OISTCdTe.trackObjects = 0;
  
  SwigClassOISTReadDataFile_NT.klass = rb_define_class_under(mOISTapp, "OISTReadDataFile_NT", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTReadDataFile_NT, (void *) &SwigClassOISTReadDataFile_NT);
  rb_define_alloc_func(SwigClassOISTReadDataFile_NT.klass, _wrap_OISTReadDataFile_NT_allocate);
  rb_define_method(SwigClassOISTReadDataFile_NT.klass, "initialize", VALUEFUNC(_wrap_new_OISTReadDataFile_NT), -1);
  SwigClassOISTReadDataFile_NT.mark = 0;
  SwigClassOISTReadDataFile_NT.destroy = (void (*)(void *)) free_oistapp_OISTReadDataFile_NT;
  SwigClassOISTReadDataFile_NT.trackObjects = 0;
  
  SwigClassOISTReadDataFile_Muon.klass = rb_define_class_under(mOISTapp, "OISTReadDataFile_Muon", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTReadDataFile_Muon, (void *) &SwigClassOISTReadDataFile_Muon);
  rb_define_alloc_func(SwigClassOISTReadDataFile_Muon.klass, _wrap_OISTReadDataFile_Muon_allocate);
  rb_define_method(SwigClassOISTReadDataFile_Muon.klass, "initialize", VALUEFUNC(_wrap_new_OISTReadDataFile_Muon), -1);
  SwigClassOISTReadDataFile_Muon.mark = 0;
  SwigClassOISTReadDataFile_Muon.destroy = (void (*)(void *)) free_oistapp_OISTReadDataFile_Muon;
  SwigClassOISTReadDataFile_Muon.trackObjects = 0;
  
  SwigClassOISTReadDataFile_Muon2.klass = rb_define_class_under(mOISTapp, "OISTReadDataFile_Muon2", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTReadDataFile_Muon2, (void *) &SwigClassOISTReadDataFile_Muon2);
  rb_define_alloc_func(SwigClassOISTReadDataFile_Muon2.klass, _wrap_OISTReadDataFile_Muon2_allocate);
  rb_define_method(SwigClassOISTReadDataFile_Muon2.klass, "initialize", VALUEFUNC(_wrap_new_OISTReadDataFile_Muon2), -1);
  SwigClassOISTReadDataFile_Muon2.mark = 0;
  SwigClassOISTReadDataFile_Muon2.destroy = (void (*)(void *)) free_oistapp_OISTReadDataFile_Muon2;
  SwigClassOISTReadDataFile_Muon2.trackObjects = 0;
  
  SwigClassOIST1DHistogram.klass = rb_define_class_under(mOISTapp, "OIST1DHistogram", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OIST1DHistogram, (void *) &SwigClassOIST1DHistogram);
  rb_define_alloc_func(SwigClassOIST1DHistogram.klass, _wrap_OIST1DHistogram_allocate);
  rb_define_method(SwigClassOIST1DHistogram.klass, "initialize", VALUEFUNC(_wrap_new_OIST1DHistogram), -1);
  SwigClassOIST1DHistogram.mark = 0;
  SwigClassOIST1DHistogram.destroy = (void (*)(void *)) free_oistapp_OIST1DHistogram;
  SwigClassOIST1DHistogram.trackObjects = 0;
  
  SwigClassOISTMakeDetectorHits.klass = rb_define_class_under(mOISTapp, "OISTMakeDetectorHits", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTMakeDetectorHits, (void *) &SwigClassOISTMakeDetectorHits);
  rb_define_alloc_func(SwigClassOISTMakeDetectorHits.klass, _wrap_OISTMakeDetectorHits_allocate);
  rb_define_method(SwigClassOISTMakeDetectorHits.klass, "initialize", VALUEFUNC(_wrap_new_OISTMakeDetectorHits), -1);
  SwigClassOISTMakeDetectorHits.mark = 0;
  SwigClassOISTMakeDetectorHits.destroy = (void (*)(void *)) free_oistapp_OISTMakeDetectorHits;
  SwigClassOISTMakeDetectorHits.trackObjects = 0;
  
  SwigClassOISTMakeDetectorHits_OISTCdTe.klass = rb_define_class_under(mOISTapp, "OISTMakeDetectorHits_OISTCdTe", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTMakeDetectorHits_OISTCdTe, (void *) &SwigClassOISTMakeDetectorHits_OISTCdTe);
  rb_define_alloc_func(SwigClassOISTMakeDetectorHits_OISTCdTe.klass, _wrap_OISTMakeDetectorHits_OISTCdTe_allocate);
  rb_define_method(SwigClassOISTMakeDetectorHits_OISTCdTe.klass, "initialize", VALUEFUNC(_wrap_new_OISTMakeDetectorHits_OISTCdTe), -1);
  SwigClassOISTMakeDetectorHits_OISTCdTe.mark = 0;
  SwigClassOISTMakeDetectorHits_OISTCdTe.destroy = (void (*)(void *)) free_oistapp_OISTMakeDetectorHits_OISTCdTe;
  SwigClassOISTMakeDetectorHits_OISTCdTe.trackObjects = 0;
  
  SwigClassOISTMakeDetectorHits_Muon.klass = rb_define_class_under(mOISTapp, "OISTMakeDetectorHits_Muon", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTMakeDetectorHits_Muon, (void *) &SwigClassOISTMakeDetectorHits_Muon);
  rb_define_alloc_func(SwigClassOISTMakeDetectorHits_Muon.klass, _wrap_OISTMakeDetectorHits_Muon_allocate);
  rb_define_method(SwigClassOISTMakeDetectorHits_Muon.klass, "initialize", VALUEFUNC(_wrap_new_OISTMakeDetectorHits_Muon), -1);
  SwigClassOISTMakeDetectorHits_Muon.mark = 0;
  SwigClassOISTMakeDetectorHits_Muon.destroy = (void (*)(void *)) free_oistapp_OISTMakeDetectorHits_Muon;
  SwigClassOISTMakeDetectorHits_Muon.trackObjects = 0;
  
  SwigClassOISTHitTreeIO.klass = rb_define_class_under(mOISTapp, "OISTHitTreeIO", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTHitTreeIO, (void *) &SwigClassOISTHitTreeIO);
  rb_define_alloc_func(SwigClassOISTHitTreeIO.klass, _wrap_OISTHitTreeIO_allocate);
  rb_define_method(SwigClassOISTHitTreeIO.klass, "initialize", VALUEFUNC(_wrap_new_OISTHitTreeIO), -1);
  SwigClassOISTHitTreeIO.mark = 0;
  SwigClassOISTHitTreeIO.destroy = (void (*)(void *)) free_oistapp_OISTHitTreeIO;
  SwigClassOISTHitTreeIO.trackObjects = 0;
  
  SwigClassOISTHitTreeIOWithInitialInfo.klass = rb_define_class_under(mOISTapp, "OISTHitTreeIOWithInitialInfo", ((swig_class *) SWIGTYPE_p_oistapp__OISTHitTreeIO->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTHitTreeIOWithInitialInfo, (void *) &SwigClassOISTHitTreeIOWithInitialInfo);
  rb_define_alloc_func(SwigClassOISTHitTreeIOWithInitialInfo.klass, _wrap_OISTHitTreeIOWithInitialInfo_allocate);
  rb_define_method(SwigClassOISTHitTreeIOWithInitialInfo.klass, "initialize", VALUEFUNC(_wrap_new_OISTHitTreeIOWithInitialInfo), -1);
  SwigClassOISTHitTreeIOWithInitialInfo.mark = 0;
  SwigClassOISTHitTreeIOWithInitialInfo.destroy = (void (*)(void *)) free_oistapp_OISTHitTreeIOWithInitialInfo;
  SwigClassOISTHitTreeIOWithInitialInfo.trackObjects = 0;
  
  SwigClassOISTMakeDetectorHits_COMP.klass = rb_define_class_under(mOISTapp, "OISTMakeDetectorHits_COMP", ((swig_class *) SWIGTYPE_p_comptonsoft__SelectHits->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTMakeDetectorHits_COMP, (void *) &SwigClassOISTMakeDetectorHits_COMP);
  rb_define_alloc_func(SwigClassOISTMakeDetectorHits_COMP.klass, _wrap_OISTMakeDetectorHits_COMP_allocate);
  rb_define_method(SwigClassOISTMakeDetectorHits_COMP.klass, "initialize", VALUEFUNC(_wrap_new_OISTMakeDetectorHits_COMP), -1);
  SwigClassOISTMakeDetectorHits_COMP.mark = 0;
  SwigClassOISTMakeDetectorHits_COMP.destroy = (void (*)(void *)) free_oistapp_OISTMakeDetectorHits_COMP;
  SwigClassOISTMakeDetectorHits_COMP.trackObjects = 0;
  
  SwigClassOISTReadDataFile_COMP.klass = rb_define_class_under(mOISTapp, "OISTReadDataFile_COMP", ((swig_class *) SWIGTYPE_p_comptonsoft__ReadDataFile->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTReadDataFile_COMP, (void *) &SwigClassOISTReadDataFile_COMP);
  rb_define_alloc_func(SwigClassOISTReadDataFile_COMP.klass, _wrap_OISTReadDataFile_COMP_allocate);
  rb_define_method(SwigClassOISTReadDataFile_COMP.klass, "initialize", VALUEFUNC(_wrap_new_OISTReadDataFile_COMP), -1);
  SwigClassOISTReadDataFile_COMP.mark = 0;
  SwigClassOISTReadDataFile_COMP.destroy = (void (*)(void *)) free_oistapp_OISTReadDataFile_COMP;
  SwigClassOISTReadDataFile_COMP.trackObjects = 0;
  
  SwigClassOISTWriteHitTree.klass = rb_define_class_under(mOISTapp, "OISTWriteHitTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTWriteHitTree, (void *) &SwigClassOISTWriteHitTree);
  rb_define_alloc_func(SwigClassOISTWriteHitTree.klass, _wrap_OISTWriteHitTree_allocate);
  rb_define_method(SwigClassOISTWriteHitTree.klass, "initialize", VALUEFUNC(_wrap_new_OISTWriteHitTree), -1);
  SwigClassOISTWriteHitTree.mark = 0;
  SwigClassOISTWriteHitTree.destroy = (void (*)(void *)) free_oistapp_OISTWriteHitTree;
  SwigClassOISTWriteHitTree.trackObjects = 0;
  
  SwigClassOISTComptonEventTreeIO.klass = rb_define_class_under(mOISTapp, "OISTComptonEventTreeIO", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTComptonEventTreeIO, (void *) &SwigClassOISTComptonEventTreeIO);
  rb_define_alloc_func(SwigClassOISTComptonEventTreeIO.klass, _wrap_OISTComptonEventTreeIO_allocate);
  rb_define_method(SwigClassOISTComptonEventTreeIO.klass, "initialize", VALUEFUNC(_wrap_new_OISTComptonEventTreeIO), -1);
  SwigClassOISTComptonEventTreeIO.mark = 0;
  SwigClassOISTComptonEventTreeIO.destroy = (void (*)(void *)) free_oistapp_OISTComptonEventTreeIO;
  SwigClassOISTComptonEventTreeIO.trackObjects = 0;
  
  SwigClassOISTComptonEventTreeIOWithInitialInfo.klass = rb_define_class_under(mOISTapp, "OISTComptonEventTreeIOWithInitialInfo", ((swig_class *) SWIGTYPE_p_oistapp__OISTComptonEventTreeIO->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTComptonEventTreeIOWithInitialInfo, (void *) &SwigClassOISTComptonEventTreeIOWithInitialInfo);
  rb_define_alloc_func(SwigClassOISTComptonEventTreeIOWithInitialInfo.klass, _wrap_OISTComptonEventTreeIOWithInitialInfo_allocate);
  rb_define_method(SwigClassOISTComptonEventTreeIOWithInitialInfo.klass, "initialize", VALUEFUNC(_wrap_new_OISTComptonEventTreeIOWithInitialInfo), -1);
  SwigClassOISTComptonEventTreeIOWithInitialInfo.mark = 0;
  SwigClassOISTComptonEventTreeIOWithInitialInfo.destroy = (void (*)(void *)) free_oistapp_OISTComptonEventTreeIOWithInitialInfo;
  SwigClassOISTComptonEventTreeIOWithInitialInfo.trackObjects = 0;
  
  SwigClassOISTReadHitTree.klass = rb_define_class_under(mOISTapp, "OISTReadHitTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTReadHitTree, (void *) &SwigClassOISTReadHitTree);
  rb_define_alloc_func(SwigClassOISTReadHitTree.klass, _wrap_OISTReadHitTree_allocate);
  rb_define_method(SwigClassOISTReadHitTree.klass, "initialize", VALUEFUNC(_wrap_new_OISTReadHitTree), -1);
  SwigClassOISTReadHitTree.mark = 0;
  SwigClassOISTReadHitTree.destroy = (void (*)(void *)) free_oistapp_OISTReadHitTree;
  SwigClassOISTReadHitTree.trackObjects = 0;
  
  SwigClassOISTWriteComptonEventTree.klass = rb_define_class_under(mOISTapp, "OISTWriteComptonEventTree", ((swig_class *) SWIGTYPE_p_comptonsoft__VCSModule->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_oistapp__OISTWriteComptonEventTree, (void *) &SwigClassOISTWriteComptonEventTree);
  rb_define_alloc_func(SwigClassOISTWriteComptonEventTree.klass, _wrap_OISTWriteComptonEventTree_allocate);
  rb_define_method(SwigClassOISTWriteComptonEventTree.klass, "initialize", VALUEFUNC(_wrap_new_OISTWriteComptonEventTree), -1);
  SwigClassOISTWriteComptonEventTree.mark = 0;
  SwigClassOISTWriteComptonEventTree.destroy = (void (*)(void *)) free_oistapp_OISTWriteComptonEventTree;
  SwigClassOISTWriteComptonEventTree.trackObjects = 0;
}

